/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLFileInfoInput {
  name?: string;
  alternativeText?: string;
  caption?: string;
}

export interface GQLUsersPermissionsMe {
  id: string;
  username: string;
  email: string;
  confirmed?: boolean;
  blocked?: boolean;
  role?: GQLUsersPermissionsMeRole;
  user?: GQLUsersPermissionsUser;
}

export interface GQLUsersPermissionsMeRole {
  id: string;
  name: string;
  description?: string;
  type?: string;
}

export interface GQLUsersPermissionsRegisterInput {
  username: string;
  email: string;
  password: string;
}

export interface GQLUsersPermissionsLoginInput {
  identifier: string;
  password: string;
  provider?: string;
}

export interface GQLUsersPermissionsLoginPayload {
  jwt?: string;
  user: GQLUsersPermissionsMe;
}

export interface GQLUserPermissionsPasswordPayload {
  ok: boolean;
}

export interface GQLRecipe {
  id: string;
  created_at: GQLDateTime;
  updated_at: GQLDateTime;
  title: string;
  slug: string;
  image?: GQLUploadFile;
  notes?: string;
  time?: number;
  quantity?: number;
  steps?: string;
  ingredients?: Array<GQLComponentRecipesIngredients | null>;
  author?: GQLUsersPermissionsUser;
  published_at?: GQLDateTime;
  tags?: Array<GQLTags | null>;
}

export interface GQLRecipeConnection {
  values?: Array<GQLRecipe | null>;
  groupBy?: GQLRecipeGroupBy;
  aggregate?: GQLRecipeAggregator;
}

export interface GQLRecipeAggregator {
  count?: number;
  totalCount?: number;
  sum?: GQLRecipeAggregatorSum;
  avg?: GQLRecipeAggregatorAvg;
  min?: GQLRecipeAggregatorMin;
  max?: GQLRecipeAggregatorMax;
}

export interface GQLRecipeAggregatorSum {
  time?: number;
  quantity?: number;
}

export interface GQLRecipeAggregatorAvg {
  time?: number;
  quantity?: number;
}

export interface GQLRecipeAggregatorMin {
  time?: number;
  quantity?: number;
}

export interface GQLRecipeAggregatorMax {
  time?: number;
  quantity?: number;
}

export interface GQLRecipeGroupBy {
  id?: Array<GQLRecipeConnectionId | null>;
  created_at?: Array<GQLRecipeConnectionCreated_at | null>;
  updated_at?: Array<GQLRecipeConnectionUpdated_at | null>;
  title?: Array<GQLRecipeConnectionTitle | null>;
  slug?: Array<GQLRecipeConnectionSlug | null>;
  image?: Array<GQLRecipeConnectionImage | null>;
  notes?: Array<GQLRecipeConnectionNotes | null>;
  time?: Array<GQLRecipeConnectionTime | null>;
  quantity?: Array<GQLRecipeConnectionQuantity | null>;
  steps?: Array<GQLRecipeConnectionSteps | null>;
  author?: Array<GQLRecipeConnectionAuthor | null>;
  published_at?: Array<GQLRecipeConnectionPublished_at | null>;
}

export interface GQLRecipeConnectionId {
  key?: string;
  connection?: GQLRecipeConnection;
}

export interface GQLRecipeConnectionCreated_at {
  key?: GQLDateTime;
  connection?: GQLRecipeConnection;
}

export interface GQLRecipeConnectionUpdated_at {
  key?: GQLDateTime;
  connection?: GQLRecipeConnection;
}

export interface GQLRecipeConnectionTitle {
  key?: string;
  connection?: GQLRecipeConnection;
}

export interface GQLRecipeConnectionSlug {
  key?: string;
  connection?: GQLRecipeConnection;
}

export interface GQLRecipeConnectionImage {
  key?: string;
  connection?: GQLRecipeConnection;
}

export interface GQLRecipeConnectionNotes {
  key?: string;
  connection?: GQLRecipeConnection;
}

export interface GQLRecipeConnectionTime {
  key?: number;
  connection?: GQLRecipeConnection;
}

export interface GQLRecipeConnectionQuantity {
  key?: number;
  connection?: GQLRecipeConnection;
}

export interface GQLRecipeConnectionSteps {
  key?: string;
  connection?: GQLRecipeConnection;
}

export interface GQLRecipeConnectionAuthor {
  key?: string;
  connection?: GQLRecipeConnection;
}

export interface GQLRecipeConnectionPublished_at {
  key?: GQLDateTime;
  connection?: GQLRecipeConnection;
}

export interface GQLRecipeInput {
  title: string;
  slug: string;
  image?: string;
  notes?: string;
  time?: number;
  quantity?: number;
  tags?: Array<string | null>;
  steps?: string;
  ingredients?: Array<GQLComponentRecipesIngredientInput | null>;
  author?: string;
  published_at?: GQLDateTime;
  created_by?: string;
  updated_by?: string;
}

export interface GQLeditRecipeInput {
  title?: string;
  slug?: string;
  image?: string;
  notes?: string;
  time?: number;
  quantity?: number;
  tags?: Array<string | null>;
  steps?: string;
  ingredients?: Array<GQLeditComponentRecipesIngredientInput | null>;
  author?: string;
  published_at?: GQLDateTime;
  created_by?: string;
  updated_by?: string;
}

export interface GQLcreateRecipeInput {
  data?: GQLRecipeInput;
}

export interface GQLcreateRecipePayload {
  recipe?: GQLRecipe;
}

export interface GQLupdateRecipeInput {
  where?: GQLInputID;
  data?: GQLeditRecipeInput;
}

export interface GQLupdateRecipePayload {
  recipe?: GQLRecipe;
}

export interface GQLdeleteRecipeInput {
  where?: GQLInputID;
}

export interface GQLdeleteRecipePayload {
  recipe?: GQLRecipe;
}

export interface GQLTags {
  id: string;
  created_at: GQLDateTime;
  updated_at: GQLDateTime;
  title: string;
  slug: string;
  recipes?: Array<GQLRecipe | null>;
}

export interface GQLTagsConnection {
  values?: Array<GQLTags | null>;
  groupBy?: GQLTagsGroupBy;
  aggregate?: GQLTagsAggregator;
}

export interface GQLTagsAggregator {
  count?: number;
  totalCount?: number;
}

export interface GQLTagsGroupBy {
  id?: Array<GQLTagsConnectionId | null>;
  created_at?: Array<GQLTagsConnectionCreated_at | null>;
  updated_at?: Array<GQLTagsConnectionUpdated_at | null>;
  title?: Array<GQLTagsConnectionTitle | null>;
  slug?: Array<GQLTagsConnectionSlug | null>;
}

export interface GQLTagsConnectionId {
  key?: string;
  connection?: GQLTagsConnection;
}

export interface GQLTagsConnectionCreated_at {
  key?: GQLDateTime;
  connection?: GQLTagsConnection;
}

export interface GQLTagsConnectionUpdated_at {
  key?: GQLDateTime;
  connection?: GQLTagsConnection;
}

export interface GQLTagsConnectionTitle {
  key?: string;
  connection?: GQLTagsConnection;
}

export interface GQLTagsConnectionSlug {
  key?: string;
  connection?: GQLTagsConnection;
}

export interface GQLTagInput {
  title: string;
  recipes?: Array<string | null>;
  slug: string;
  created_by?: string;
  updated_by?: string;
}

export interface GQLeditTagInput {
  title?: string;
  recipes?: Array<string | null>;
  slug?: string;
  created_by?: string;
  updated_by?: string;
}

export interface GQLcreateTagInput {
  data?: GQLTagInput;
}

export interface GQLcreateTagPayload {
  tag?: GQLTags;
}

export interface GQLupdateTagInput {
  where?: GQLInputID;
  data?: GQLeditTagInput;
}

export interface GQLupdateTagPayload {
  tag?: GQLTags;
}

export interface GQLdeleteTagInput {
  where?: GQLInputID;
}

export interface GQLdeleteTagPayload {
  tag?: GQLTags;
}

export interface GQLUsersFavoriteRecipes {
  id: string;
  created_at: GQLDateTime;
  updated_at: GQLDateTime;
  user?: GQLUsersPermissionsUser;
  recipe?: GQLRecipe;
}

export interface GQLUsersFavoriteRecipesConnection {
  values?: Array<GQLUsersFavoriteRecipes | null>;
  groupBy?: GQLUsersFavoriteRecipesGroupBy;
  aggregate?: GQLUsersFavoriteRecipesAggregator;
}

export interface GQLUsersFavoriteRecipesAggregator {
  count?: number;
  totalCount?: number;
}

export interface GQLUsersFavoriteRecipesGroupBy {
  id?: Array<GQLUsersFavoriteRecipesConnectionId | null>;
  created_at?: Array<GQLUsersFavoriteRecipesConnectionCreated_at | null>;
  updated_at?: Array<GQLUsersFavoriteRecipesConnectionUpdated_at | null>;
  user?: Array<GQLUsersFavoriteRecipesConnectionUser | null>;
  recipe?: Array<GQLUsersFavoriteRecipesConnectionRecipe | null>;
}

export interface GQLUsersFavoriteRecipesConnectionId {
  key?: string;
  connection?: GQLUsersFavoriteRecipesConnection;
}

export interface GQLUsersFavoriteRecipesConnectionCreated_at {
  key?: GQLDateTime;
  connection?: GQLUsersFavoriteRecipesConnection;
}

export interface GQLUsersFavoriteRecipesConnectionUpdated_at {
  key?: GQLDateTime;
  connection?: GQLUsersFavoriteRecipesConnection;
}

export interface GQLUsersFavoriteRecipesConnectionUser {
  key?: string;
  connection?: GQLUsersFavoriteRecipesConnection;
}

export interface GQLUsersFavoriteRecipesConnectionRecipe {
  key?: string;
  connection?: GQLUsersFavoriteRecipesConnection;
}

export interface GQLUsersFavoriteRecipeInput {
  user?: string;
  recipe?: string;
  created_by?: string;
  updated_by?: string;
}

export interface GQLeditUsersFavoriteRecipeInput {
  user?: string;
  recipe?: string;
  created_by?: string;
  updated_by?: string;
}

export interface GQLcreateUsersFavoriteRecipeInput {
  data?: GQLUsersFavoriteRecipeInput;
}

export interface GQLcreateUsersFavoriteRecipePayload {
  usersFavoriteRecipe?: GQLUsersFavoriteRecipes;
}

export interface GQLupdateUsersFavoriteRecipeInput {
  where?: GQLInputID;
  data?: GQLeditUsersFavoriteRecipeInput;
}

export interface GQLupdateUsersFavoriteRecipePayload {
  usersFavoriteRecipe?: GQLUsersFavoriteRecipes;
}

export interface GQLdeleteUsersFavoriteRecipeInput {
  where?: GQLInputID;
}

export interface GQLdeleteUsersFavoriteRecipePayload {
  usersFavoriteRecipe?: GQLUsersFavoriteRecipes;
}

export interface GQLUsersViewedRecipes {
  id: string;
  created_at: GQLDateTime;
  updated_at: GQLDateTime;
  user?: GQLUsersPermissionsUser;
  recipe?: GQLRecipe;
}

export interface GQLUsersViewedRecipesConnection {
  values?: Array<GQLUsersViewedRecipes | null>;
  groupBy?: GQLUsersViewedRecipesGroupBy;
  aggregate?: GQLUsersViewedRecipesAggregator;
}

export interface GQLUsersViewedRecipesAggregator {
  count?: number;
  totalCount?: number;
}

export interface GQLUsersViewedRecipesGroupBy {
  id?: Array<GQLUsersViewedRecipesConnectionId | null>;
  created_at?: Array<GQLUsersViewedRecipesConnectionCreated_at | null>;
  updated_at?: Array<GQLUsersViewedRecipesConnectionUpdated_at | null>;
  user?: Array<GQLUsersViewedRecipesConnectionUser | null>;
  recipe?: Array<GQLUsersViewedRecipesConnectionRecipe | null>;
}

export interface GQLUsersViewedRecipesConnectionId {
  key?: string;
  connection?: GQLUsersViewedRecipesConnection;
}

export interface GQLUsersViewedRecipesConnectionCreated_at {
  key?: GQLDateTime;
  connection?: GQLUsersViewedRecipesConnection;
}

export interface GQLUsersViewedRecipesConnectionUpdated_at {
  key?: GQLDateTime;
  connection?: GQLUsersViewedRecipesConnection;
}

export interface GQLUsersViewedRecipesConnectionUser {
  key?: string;
  connection?: GQLUsersViewedRecipesConnection;
}

export interface GQLUsersViewedRecipesConnectionRecipe {
  key?: string;
  connection?: GQLUsersViewedRecipesConnection;
}

export interface GQLUsersViewedRecipeInput {
  user?: string;
  recipe?: string;
  created_by?: string;
  updated_by?: string;
}

export interface GQLeditUsersViewedRecipeInput {
  user?: string;
  recipe?: string;
  created_by?: string;
  updated_by?: string;
}

export interface GQLcreateUsersViewedRecipeInput {
  data?: GQLUsersViewedRecipeInput;
}

export interface GQLcreateUsersViewedRecipePayload {
  usersViewedRecipe?: GQLUsersViewedRecipes;
}

export interface GQLupdateUsersViewedRecipeInput {
  where?: GQLInputID;
  data?: GQLeditUsersViewedRecipeInput;
}

export interface GQLupdateUsersViewedRecipePayload {
  usersViewedRecipe?: GQLUsersViewedRecipes;
}

export interface GQLdeleteUsersViewedRecipeInput {
  where?: GQLInputID;
}

export interface GQLdeleteUsersViewedRecipePayload {
  usersViewedRecipe?: GQLUsersViewedRecipes;
}

export interface GQLUploadFile {
  id: string;
  created_at: GQLDateTime;
  updated_at: GQLDateTime;
  name: string;
  alternativeText?: string;
  caption?: string;
  width?: number;
  height?: number;
  formats?: GQLJSON;
  hash: string;
  ext?: string;
  mime: string;
  size: number;
  url: string;
  previewUrl?: string;
  provider: string;
  provider_metadata?: GQLJSON;
  related?: Array<GQLMorph | null>;
}

export interface GQLUploadFileConnection {
  values?: Array<GQLUploadFile | null>;
  groupBy?: GQLUploadFileGroupBy;
  aggregate?: GQLUploadFileAggregator;
}

export interface GQLUploadFileAggregator {
  count?: number;
  totalCount?: number;
  sum?: GQLUploadFileAggregatorSum;
  avg?: GQLUploadFileAggregatorAvg;
  min?: GQLUploadFileAggregatorMin;
  max?: GQLUploadFileAggregatorMax;
}

export interface GQLUploadFileAggregatorSum {
  width?: number;
  height?: number;
  size?: number;
}

export interface GQLUploadFileAggregatorAvg {
  width?: number;
  height?: number;
  size?: number;
}

export interface GQLUploadFileAggregatorMin {
  width?: number;
  height?: number;
  size?: number;
}

export interface GQLUploadFileAggregatorMax {
  width?: number;
  height?: number;
  size?: number;
}

export interface GQLUploadFileGroupBy {
  id?: Array<GQLUploadFileConnectionId | null>;
  created_at?: Array<GQLUploadFileConnectionCreated_at | null>;
  updated_at?: Array<GQLUploadFileConnectionUpdated_at | null>;
  name?: Array<GQLUploadFileConnectionName | null>;
  alternativeText?: Array<GQLUploadFileConnectionAlternativeText | null>;
  caption?: Array<GQLUploadFileConnectionCaption | null>;
  width?: Array<GQLUploadFileConnectionWidth | null>;
  height?: Array<GQLUploadFileConnectionHeight | null>;
  formats?: Array<GQLUploadFileConnectionFormats | null>;
  hash?: Array<GQLUploadFileConnectionHash | null>;
  ext?: Array<GQLUploadFileConnectionExt | null>;
  mime?: Array<GQLUploadFileConnectionMime | null>;
  size?: Array<GQLUploadFileConnectionSize | null>;
  url?: Array<GQLUploadFileConnectionUrl | null>;
  previewUrl?: Array<GQLUploadFileConnectionPreviewUrl | null>;
  provider?: Array<GQLUploadFileConnectionProvider | null>;
  provider_metadata?: Array<GQLUploadFileConnectionProvider_metadata | null>;
}

export interface GQLUploadFileConnectionId {
  key?: string;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionCreated_at {
  key?: GQLDateTime;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionUpdated_at {
  key?: GQLDateTime;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionName {
  key?: string;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionAlternativeText {
  key?: string;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionCaption {
  key?: string;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionWidth {
  key?: number;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionHeight {
  key?: number;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionFormats {
  key?: GQLJSON;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionHash {
  key?: string;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionExt {
  key?: string;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionMime {
  key?: string;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionSize {
  key?: number;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionUrl {
  key?: string;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionPreviewUrl {
  key?: string;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionProvider {
  key?: string;
  connection?: GQLUploadFileConnection;
}

export interface GQLUploadFileConnectionProvider_metadata {
  key?: GQLJSON;
  connection?: GQLUploadFileConnection;
}

export interface GQLFileInput {
  name: string;
  alternativeText?: string;
  caption?: string;
  width?: number;
  height?: number;
  formats?: GQLJSON;
  hash: string;
  ext?: string;
  mime: string;
  size: number;
  url: string;
  previewUrl?: string;
  provider: string;
  provider_metadata?: GQLJSON;
  related?: Array<string | null>;
  created_by?: string;
  updated_by?: string;
}

export interface GQLeditFileInput {
  name?: string;
  alternativeText?: string;
  caption?: string;
  width?: number;
  height?: number;
  formats?: GQLJSON;
  hash?: string;
  ext?: string;
  mime?: string;
  size?: number;
  url?: string;
  previewUrl?: string;
  provider?: string;
  provider_metadata?: GQLJSON;
  related?: Array<string | null>;
  created_by?: string;
  updated_by?: string;
}

export interface GQLdeleteFileInput {
  where?: GQLInputID;
}

export interface GQLdeleteFilePayload {
  file?: GQLUploadFile;
}

export interface GQLUsersPermissionsPermission {
  id: string;
  type: string;
  controller: string;
  action: string;
  enabled: boolean;
  policy?: string;
  role?: GQLUsersPermissionsRole;
}

export interface GQLUsersPermissionsRole {
  id: string;
  name: string;
  description?: string;
  type?: string;
  permissions?: Array<GQLUsersPermissionsPermission | null>;
  users?: Array<GQLUsersPermissionsUser | null>;
}

export interface GQLUsersPermissionsRoleConnection {
  values?: Array<GQLUsersPermissionsRole | null>;
  groupBy?: GQLUsersPermissionsRoleGroupBy;
  aggregate?: GQLUsersPermissionsRoleAggregator;
}

export interface GQLUsersPermissionsRoleAggregator {
  count?: number;
  totalCount?: number;
}

export interface GQLUsersPermissionsRoleGroupBy {
  id?: Array<GQLUsersPermissionsRoleConnectionId | null>;
  name?: Array<GQLUsersPermissionsRoleConnectionName | null>;
  description?: Array<GQLUsersPermissionsRoleConnectionDescription | null>;
  type?: Array<GQLUsersPermissionsRoleConnectionType | null>;
}

export interface GQLUsersPermissionsRoleConnectionId {
  key?: string;
  connection?: GQLUsersPermissionsRoleConnection;
}

export interface GQLUsersPermissionsRoleConnectionName {
  key?: string;
  connection?: GQLUsersPermissionsRoleConnection;
}

export interface GQLUsersPermissionsRoleConnectionDescription {
  key?: string;
  connection?: GQLUsersPermissionsRoleConnection;
}

export interface GQLUsersPermissionsRoleConnectionType {
  key?: string;
  connection?: GQLUsersPermissionsRoleConnection;
}

export interface GQLRoleInput {
  name: string;
  description?: string;
  type?: string;
  permissions?: Array<string | null>;
  users?: Array<string | null>;
  created_by?: string;
  updated_by?: string;
}

export interface GQLeditRoleInput {
  name?: string;
  description?: string;
  type?: string;
  permissions?: Array<string | null>;
  users?: Array<string | null>;
  created_by?: string;
  updated_by?: string;
}

export interface GQLcreateRoleInput {
  data?: GQLRoleInput;
}

export interface GQLcreateRolePayload {
  role?: GQLUsersPermissionsRole;
}

export interface GQLupdateRoleInput {
  where?: GQLInputID;
  data?: GQLeditRoleInput;
}

export interface GQLupdateRolePayload {
  role?: GQLUsersPermissionsRole;
}

export interface GQLdeleteRoleInput {
  where?: GQLInputID;
}

export interface GQLdeleteRolePayload {
  role?: GQLUsersPermissionsRole;
}

export interface GQLUsersPermissionsUser {
  id: string;
  created_at: GQLDateTime;
  updated_at: GQLDateTime;
  username: string;
  email: string;
  provider?: string;
  confirmed?: boolean;
  blocked?: boolean;
  role?: GQLUsersPermissionsRole;
  avatar?: GQLUploadFile;
  recipes?: Array<GQLRecipe | null>;
}

export interface GQLUsersPermissionsUserConnection {
  values?: Array<GQLUsersPermissionsUser | null>;
  groupBy?: GQLUsersPermissionsUserGroupBy;
  aggregate?: GQLUsersPermissionsUserAggregator;
}

export interface GQLUsersPermissionsUserAggregator {
  count?: number;
  totalCount?: number;
}

export interface GQLUsersPermissionsUserGroupBy {
  id?: Array<GQLUsersPermissionsUserConnectionId | null>;
  created_at?: Array<GQLUsersPermissionsUserConnectionCreated_at | null>;
  updated_at?: Array<GQLUsersPermissionsUserConnectionUpdated_at | null>;
  username?: Array<GQLUsersPermissionsUserConnectionUsername | null>;
  email?: Array<GQLUsersPermissionsUserConnectionEmail | null>;
  provider?: Array<GQLUsersPermissionsUserConnectionProvider | null>;
  confirmed?: Array<GQLUsersPermissionsUserConnectionConfirmed | null>;
  blocked?: Array<GQLUsersPermissionsUserConnectionBlocked | null>;
  role?: Array<GQLUsersPermissionsUserConnectionRole | null>;
  avatar?: Array<GQLUsersPermissionsUserConnectionAvatar | null>;
}

export interface GQLUsersPermissionsUserConnectionId {
  key?: string;
  connection?: GQLUsersPermissionsUserConnection;
}

export interface GQLUsersPermissionsUserConnectionCreated_at {
  key?: GQLDateTime;
  connection?: GQLUsersPermissionsUserConnection;
}

export interface GQLUsersPermissionsUserConnectionUpdated_at {
  key?: GQLDateTime;
  connection?: GQLUsersPermissionsUserConnection;
}

export interface GQLUsersPermissionsUserConnectionUsername {
  key?: string;
  connection?: GQLUsersPermissionsUserConnection;
}

export interface GQLUsersPermissionsUserConnectionEmail {
  key?: string;
  connection?: GQLUsersPermissionsUserConnection;
}

export interface GQLUsersPermissionsUserConnectionProvider {
  key?: string;
  connection?: GQLUsersPermissionsUserConnection;
}

export interface GQLUsersPermissionsUserConnectionConfirmed {
  key?: boolean;
  connection?: GQLUsersPermissionsUserConnection;
}

export interface GQLUsersPermissionsUserConnectionBlocked {
  key?: boolean;
  connection?: GQLUsersPermissionsUserConnection;
}

export interface GQLUsersPermissionsUserConnectionRole {
  key?: string;
  connection?: GQLUsersPermissionsUserConnection;
}

export interface GQLUsersPermissionsUserConnectionAvatar {
  key?: string;
  connection?: GQLUsersPermissionsUserConnection;
}

export interface GQLUserInput {
  username: string;
  email: string;
  provider?: string;
  password?: string;
  resetPasswordToken?: string;
  confirmationToken?: string;
  confirmed?: boolean;
  blocked?: boolean;
  role?: string;
  recipes?: Array<string | null>;
  avatar?: string;
  created_by?: string;
  updated_by?: string;
}

export interface GQLeditUserInput {
  username?: string;
  email?: string;
  provider?: string;
  password?: string;
  resetPasswordToken?: string;
  confirmationToken?: string;
  confirmed?: boolean;
  blocked?: boolean;
  role?: string;
  recipes?: Array<string | null>;
  avatar?: string;
  created_by?: string;
  updated_by?: string;
}

export interface GQLcreateUserInput {
  data?: GQLUserInput;
}

export interface GQLcreateUserPayload {
  user?: GQLUsersPermissionsUser;
}

export interface GQLupdateUserInput {
  where?: GQLInputID;
  data?: GQLeditUserInput;
}

export interface GQLupdateUserPayload {
  user?: GQLUsersPermissionsUser;
}

export interface GQLdeleteUserInput {
  where?: GQLInputID;
}

export interface GQLdeleteUserPayload {
  user?: GQLUsersPermissionsUser;
}

export interface GQLComponentRecipesIngredients {
  id: string;
  title?: string;
  amount?: string;
}

export interface GQLComponentRecipesIngredientInput {
  title?: string;
  amount?: string;
}

export interface GQLeditComponentRecipesIngredientInput {
  id?: string;
  title?: string;
  amount?: string;
}

export type GQLMorph =
GQLUsersPermissionsMe |
GQLUsersPermissionsMeRole |
GQLUsersPermissionsLoginPayload |
GQLUserPermissionsPasswordPayload |
GQLRecipe |
GQLRecipeConnection |
GQLRecipeAggregator |
GQLRecipeAggregatorSum |
GQLRecipeAggregatorAvg |
GQLRecipeAggregatorMin |
GQLRecipeAggregatorMax |
GQLRecipeGroupBy |
GQLRecipeConnectionId |
GQLRecipeConnectionCreated_at |
GQLRecipeConnectionUpdated_at |
GQLRecipeConnectionTitle |
GQLRecipeConnectionSlug |
GQLRecipeConnectionImage |
GQLRecipeConnectionNotes |
GQLRecipeConnectionTime |
GQLRecipeConnectionQuantity |
GQLRecipeConnectionSteps |
GQLRecipeConnectionAuthor |
GQLRecipeConnectionPublished_at |
GQLcreateRecipePayload |
GQLupdateRecipePayload |
GQLdeleteRecipePayload |
GQLTags |
GQLTagsConnection |
GQLTagsAggregator |
GQLTagsGroupBy |
GQLTagsConnectionId |
GQLTagsConnectionCreated_at |
GQLTagsConnectionUpdated_at |
GQLTagsConnectionTitle |
GQLTagsConnectionSlug |
GQLcreateTagPayload |
GQLupdateTagPayload |
GQLdeleteTagPayload |
GQLUsersFavoriteRecipes |
GQLUsersFavoriteRecipesConnection |
GQLUsersFavoriteRecipesAggregator |
GQLUsersFavoriteRecipesGroupBy |
GQLUsersFavoriteRecipesConnectionId |
GQLUsersFavoriteRecipesConnectionCreated_at |
GQLUsersFavoriteRecipesConnectionUpdated_at |
GQLUsersFavoriteRecipesConnectionUser |
GQLUsersFavoriteRecipesConnectionRecipe |
GQLcreateUsersFavoriteRecipePayload |
GQLupdateUsersFavoriteRecipePayload |
GQLdeleteUsersFavoriteRecipePayload |
GQLUsersViewedRecipes |
GQLUsersViewedRecipesConnection |
GQLUsersViewedRecipesAggregator |
GQLUsersViewedRecipesGroupBy |
GQLUsersViewedRecipesConnectionId |
GQLUsersViewedRecipesConnectionCreated_at |
GQLUsersViewedRecipesConnectionUpdated_at |
GQLUsersViewedRecipesConnectionUser |
GQLUsersViewedRecipesConnectionRecipe |
GQLcreateUsersViewedRecipePayload |
GQLupdateUsersViewedRecipePayload |
GQLdeleteUsersViewedRecipePayload |
GQLUploadFile |
GQLUploadFileConnection |
GQLUploadFileAggregator |
GQLUploadFileAggregatorSum |
GQLUploadFileAggregatorAvg |
GQLUploadFileAggregatorMin |
GQLUploadFileAggregatorMax |
GQLUploadFileGroupBy |
GQLUploadFileConnectionId |
GQLUploadFileConnectionCreated_at |
GQLUploadFileConnectionUpdated_at |
GQLUploadFileConnectionName |
GQLUploadFileConnectionAlternativeText |
GQLUploadFileConnectionCaption |
GQLUploadFileConnectionWidth |
GQLUploadFileConnectionHeight |
GQLUploadFileConnectionFormats |
GQLUploadFileConnectionHash |
GQLUploadFileConnectionExt |
GQLUploadFileConnectionMime |
GQLUploadFileConnectionSize |
GQLUploadFileConnectionUrl |
GQLUploadFileConnectionPreviewUrl |
GQLUploadFileConnectionProvider |
GQLUploadFileConnectionProvider_metadata |
GQLdeleteFilePayload |
GQLUsersPermissionsPermission |
GQLUsersPermissionsRole |
GQLUsersPermissionsRoleConnection |
GQLUsersPermissionsRoleAggregator |
GQLUsersPermissionsRoleGroupBy |
GQLUsersPermissionsRoleConnectionId |
GQLUsersPermissionsRoleConnectionName |
GQLUsersPermissionsRoleConnectionDescription |
GQLUsersPermissionsRoleConnectionType |
GQLcreateRolePayload |
GQLupdateRolePayload |
GQLdeleteRolePayload |
GQLUsersPermissionsUser |
GQLUsersPermissionsUserConnection |
GQLUsersPermissionsUserAggregator |
GQLUsersPermissionsUserGroupBy |
GQLUsersPermissionsUserConnectionId |
GQLUsersPermissionsUserConnectionCreated_at |
GQLUsersPermissionsUserConnectionUpdated_at |
GQLUsersPermissionsUserConnectionUsername |
GQLUsersPermissionsUserConnectionEmail |
GQLUsersPermissionsUserConnectionProvider |
GQLUsersPermissionsUserConnectionConfirmed |
GQLUsersPermissionsUserConnectionBlocked |
GQLUsersPermissionsUserConnectionRole |
GQLUsersPermissionsUserConnectionAvatar |
GQLcreateUserPayload |
GQLupdateUserPayload |
GQLdeleteUserPayload |
GQLComponentRecipesIngredients;

/** Use this to resolve union type Morph */
export type GQLPossibleMorphTypeNames =
'UsersPermissionsMe' |
'UsersPermissionsMeRole' |
'UsersPermissionsLoginPayload' |
'UserPermissionsPasswordPayload' |
'Recipe' |
'RecipeConnection' |
'RecipeAggregator' |
'RecipeAggregatorSum' |
'RecipeAggregatorAvg' |
'RecipeAggregatorMin' |
'RecipeAggregatorMax' |
'RecipeGroupBy' |
'RecipeConnectionId' |
'RecipeConnectionCreated_at' |
'RecipeConnectionUpdated_at' |
'RecipeConnectionTitle' |
'RecipeConnectionSlug' |
'RecipeConnectionImage' |
'RecipeConnectionNotes' |
'RecipeConnectionTime' |
'RecipeConnectionQuantity' |
'RecipeConnectionSteps' |
'RecipeConnectionAuthor' |
'RecipeConnectionPublished_at' |
'createRecipePayload' |
'updateRecipePayload' |
'deleteRecipePayload' |
'Tags' |
'TagsConnection' |
'TagsAggregator' |
'TagsGroupBy' |
'TagsConnectionId' |
'TagsConnectionCreated_at' |
'TagsConnectionUpdated_at' |
'TagsConnectionTitle' |
'TagsConnectionSlug' |
'createTagPayload' |
'updateTagPayload' |
'deleteTagPayload' |
'UsersFavoriteRecipes' |
'UsersFavoriteRecipesConnection' |
'UsersFavoriteRecipesAggregator' |
'UsersFavoriteRecipesGroupBy' |
'UsersFavoriteRecipesConnectionId' |
'UsersFavoriteRecipesConnectionCreated_at' |
'UsersFavoriteRecipesConnectionUpdated_at' |
'UsersFavoriteRecipesConnectionUser' |
'UsersFavoriteRecipesConnectionRecipe' |
'createUsersFavoriteRecipePayload' |
'updateUsersFavoriteRecipePayload' |
'deleteUsersFavoriteRecipePayload' |
'UsersViewedRecipes' |
'UsersViewedRecipesConnection' |
'UsersViewedRecipesAggregator' |
'UsersViewedRecipesGroupBy' |
'UsersViewedRecipesConnectionId' |
'UsersViewedRecipesConnectionCreated_at' |
'UsersViewedRecipesConnectionUpdated_at' |
'UsersViewedRecipesConnectionUser' |
'UsersViewedRecipesConnectionRecipe' |
'createUsersViewedRecipePayload' |
'updateUsersViewedRecipePayload' |
'deleteUsersViewedRecipePayload' |
'UploadFile' |
'UploadFileConnection' |
'UploadFileAggregator' |
'UploadFileAggregatorSum' |
'UploadFileAggregatorAvg' |
'UploadFileAggregatorMin' |
'UploadFileAggregatorMax' |
'UploadFileGroupBy' |
'UploadFileConnectionId' |
'UploadFileConnectionCreated_at' |
'UploadFileConnectionUpdated_at' |
'UploadFileConnectionName' |
'UploadFileConnectionAlternativeText' |
'UploadFileConnectionCaption' |
'UploadFileConnectionWidth' |
'UploadFileConnectionHeight' |
'UploadFileConnectionFormats' |
'UploadFileConnectionHash' |
'UploadFileConnectionExt' |
'UploadFileConnectionMime' |
'UploadFileConnectionSize' |
'UploadFileConnectionUrl' |
'UploadFileConnectionPreviewUrl' |
'UploadFileConnectionProvider' |
'UploadFileConnectionProvider_metadata' |
'deleteFilePayload' |
'UsersPermissionsPermission' |
'UsersPermissionsRole' |
'UsersPermissionsRoleConnection' |
'UsersPermissionsRoleAggregator' |
'UsersPermissionsRoleGroupBy' |
'UsersPermissionsRoleConnectionId' |
'UsersPermissionsRoleConnectionName' |
'UsersPermissionsRoleConnectionDescription' |
'UsersPermissionsRoleConnectionType' |
'createRolePayload' |
'updateRolePayload' |
'deleteRolePayload' |
'UsersPermissionsUser' |
'UsersPermissionsUserConnection' |
'UsersPermissionsUserAggregator' |
'UsersPermissionsUserGroupBy' |
'UsersPermissionsUserConnectionId' |
'UsersPermissionsUserConnectionCreated_at' |
'UsersPermissionsUserConnectionUpdated_at' |
'UsersPermissionsUserConnectionUsername' |
'UsersPermissionsUserConnectionEmail' |
'UsersPermissionsUserConnectionProvider' |
'UsersPermissionsUserConnectionConfirmed' |
'UsersPermissionsUserConnectionBlocked' |
'UsersPermissionsUserConnectionRole' |
'UsersPermissionsUserConnectionAvatar' |
'createUserPayload' |
'updateUserPayload' |
'deleteUserPayload' |
'ComponentRecipesIngredients';

export interface GQLMorphNameMap {
  Morph: GQLMorph;
  UsersPermissionsMe: GQLUsersPermissionsMe;
  UsersPermissionsMeRole: GQLUsersPermissionsMeRole;
  UsersPermissionsLoginPayload: GQLUsersPermissionsLoginPayload;
  UserPermissionsPasswordPayload: GQLUserPermissionsPasswordPayload;
  Recipe: GQLRecipe;
  RecipeConnection: GQLRecipeConnection;
  RecipeAggregator: GQLRecipeAggregator;
  RecipeAggregatorSum: GQLRecipeAggregatorSum;
  RecipeAggregatorAvg: GQLRecipeAggregatorAvg;
  RecipeAggregatorMin: GQLRecipeAggregatorMin;
  RecipeAggregatorMax: GQLRecipeAggregatorMax;
  RecipeGroupBy: GQLRecipeGroupBy;
  RecipeConnectionId: GQLRecipeConnectionId;
  RecipeConnectionCreated_at: GQLRecipeConnectionCreated_at;
  RecipeConnectionUpdated_at: GQLRecipeConnectionUpdated_at;
  RecipeConnectionTitle: GQLRecipeConnectionTitle;
  RecipeConnectionSlug: GQLRecipeConnectionSlug;
  RecipeConnectionImage: GQLRecipeConnectionImage;
  RecipeConnectionNotes: GQLRecipeConnectionNotes;
  RecipeConnectionTime: GQLRecipeConnectionTime;
  RecipeConnectionQuantity: GQLRecipeConnectionQuantity;
  RecipeConnectionSteps: GQLRecipeConnectionSteps;
  RecipeConnectionAuthor: GQLRecipeConnectionAuthor;
  RecipeConnectionPublished_at: GQLRecipeConnectionPublished_at;
  createRecipePayload: GQLcreateRecipePayload;
  updateRecipePayload: GQLupdateRecipePayload;
  deleteRecipePayload: GQLdeleteRecipePayload;
  Tags: GQLTags;
  TagsConnection: GQLTagsConnection;
  TagsAggregator: GQLTagsAggregator;
  TagsGroupBy: GQLTagsGroupBy;
  TagsConnectionId: GQLTagsConnectionId;
  TagsConnectionCreated_at: GQLTagsConnectionCreated_at;
  TagsConnectionUpdated_at: GQLTagsConnectionUpdated_at;
  TagsConnectionTitle: GQLTagsConnectionTitle;
  TagsConnectionSlug: GQLTagsConnectionSlug;
  createTagPayload: GQLcreateTagPayload;
  updateTagPayload: GQLupdateTagPayload;
  deleteTagPayload: GQLdeleteTagPayload;
  UsersFavoriteRecipes: GQLUsersFavoriteRecipes;
  UsersFavoriteRecipesConnection: GQLUsersFavoriteRecipesConnection;
  UsersFavoriteRecipesAggregator: GQLUsersFavoriteRecipesAggregator;
  UsersFavoriteRecipesGroupBy: GQLUsersFavoriteRecipesGroupBy;
  UsersFavoriteRecipesConnectionId: GQLUsersFavoriteRecipesConnectionId;
  UsersFavoriteRecipesConnectionCreated_at: GQLUsersFavoriteRecipesConnectionCreated_at;
  UsersFavoriteRecipesConnectionUpdated_at: GQLUsersFavoriteRecipesConnectionUpdated_at;
  UsersFavoriteRecipesConnectionUser: GQLUsersFavoriteRecipesConnectionUser;
  UsersFavoriteRecipesConnectionRecipe: GQLUsersFavoriteRecipesConnectionRecipe;
  createUsersFavoriteRecipePayload: GQLcreateUsersFavoriteRecipePayload;
  updateUsersFavoriteRecipePayload: GQLupdateUsersFavoriteRecipePayload;
  deleteUsersFavoriteRecipePayload: GQLdeleteUsersFavoriteRecipePayload;
  UsersViewedRecipes: GQLUsersViewedRecipes;
  UsersViewedRecipesConnection: GQLUsersViewedRecipesConnection;
  UsersViewedRecipesAggregator: GQLUsersViewedRecipesAggregator;
  UsersViewedRecipesGroupBy: GQLUsersViewedRecipesGroupBy;
  UsersViewedRecipesConnectionId: GQLUsersViewedRecipesConnectionId;
  UsersViewedRecipesConnectionCreated_at: GQLUsersViewedRecipesConnectionCreated_at;
  UsersViewedRecipesConnectionUpdated_at: GQLUsersViewedRecipesConnectionUpdated_at;
  UsersViewedRecipesConnectionUser: GQLUsersViewedRecipesConnectionUser;
  UsersViewedRecipesConnectionRecipe: GQLUsersViewedRecipesConnectionRecipe;
  createUsersViewedRecipePayload: GQLcreateUsersViewedRecipePayload;
  updateUsersViewedRecipePayload: GQLupdateUsersViewedRecipePayload;
  deleteUsersViewedRecipePayload: GQLdeleteUsersViewedRecipePayload;
  UploadFile: GQLUploadFile;
  UploadFileConnection: GQLUploadFileConnection;
  UploadFileAggregator: GQLUploadFileAggregator;
  UploadFileAggregatorSum: GQLUploadFileAggregatorSum;
  UploadFileAggregatorAvg: GQLUploadFileAggregatorAvg;
  UploadFileAggregatorMin: GQLUploadFileAggregatorMin;
  UploadFileAggregatorMax: GQLUploadFileAggregatorMax;
  UploadFileGroupBy: GQLUploadFileGroupBy;
  UploadFileConnectionId: GQLUploadFileConnectionId;
  UploadFileConnectionCreated_at: GQLUploadFileConnectionCreated_at;
  UploadFileConnectionUpdated_at: GQLUploadFileConnectionUpdated_at;
  UploadFileConnectionName: GQLUploadFileConnectionName;
  UploadFileConnectionAlternativeText: GQLUploadFileConnectionAlternativeText;
  UploadFileConnectionCaption: GQLUploadFileConnectionCaption;
  UploadFileConnectionWidth: GQLUploadFileConnectionWidth;
  UploadFileConnectionHeight: GQLUploadFileConnectionHeight;
  UploadFileConnectionFormats: GQLUploadFileConnectionFormats;
  UploadFileConnectionHash: GQLUploadFileConnectionHash;
  UploadFileConnectionExt: GQLUploadFileConnectionExt;
  UploadFileConnectionMime: GQLUploadFileConnectionMime;
  UploadFileConnectionSize: GQLUploadFileConnectionSize;
  UploadFileConnectionUrl: GQLUploadFileConnectionUrl;
  UploadFileConnectionPreviewUrl: GQLUploadFileConnectionPreviewUrl;
  UploadFileConnectionProvider: GQLUploadFileConnectionProvider;
  UploadFileConnectionProvider_metadata: GQLUploadFileConnectionProvider_metadata;
  deleteFilePayload: GQLdeleteFilePayload;
  UsersPermissionsPermission: GQLUsersPermissionsPermission;
  UsersPermissionsRole: GQLUsersPermissionsRole;
  UsersPermissionsRoleConnection: GQLUsersPermissionsRoleConnection;
  UsersPermissionsRoleAggregator: GQLUsersPermissionsRoleAggregator;
  UsersPermissionsRoleGroupBy: GQLUsersPermissionsRoleGroupBy;
  UsersPermissionsRoleConnectionId: GQLUsersPermissionsRoleConnectionId;
  UsersPermissionsRoleConnectionName: GQLUsersPermissionsRoleConnectionName;
  UsersPermissionsRoleConnectionDescription: GQLUsersPermissionsRoleConnectionDescription;
  UsersPermissionsRoleConnectionType: GQLUsersPermissionsRoleConnectionType;
  createRolePayload: GQLcreateRolePayload;
  updateRolePayload: GQLupdateRolePayload;
  deleteRolePayload: GQLdeleteRolePayload;
  UsersPermissionsUser: GQLUsersPermissionsUser;
  UsersPermissionsUserConnection: GQLUsersPermissionsUserConnection;
  UsersPermissionsUserAggregator: GQLUsersPermissionsUserAggregator;
  UsersPermissionsUserGroupBy: GQLUsersPermissionsUserGroupBy;
  UsersPermissionsUserConnectionId: GQLUsersPermissionsUserConnectionId;
  UsersPermissionsUserConnectionCreated_at: GQLUsersPermissionsUserConnectionCreated_at;
  UsersPermissionsUserConnectionUpdated_at: GQLUsersPermissionsUserConnectionUpdated_at;
  UsersPermissionsUserConnectionUsername: GQLUsersPermissionsUserConnectionUsername;
  UsersPermissionsUserConnectionEmail: GQLUsersPermissionsUserConnectionEmail;
  UsersPermissionsUserConnectionProvider: GQLUsersPermissionsUserConnectionProvider;
  UsersPermissionsUserConnectionConfirmed: GQLUsersPermissionsUserConnectionConfirmed;
  UsersPermissionsUserConnectionBlocked: GQLUsersPermissionsUserConnectionBlocked;
  UsersPermissionsUserConnectionRole: GQLUsersPermissionsUserConnectionRole;
  UsersPermissionsUserConnectionAvatar: GQLUsersPermissionsUserConnectionAvatar;
  createUserPayload: GQLcreateUserPayload;
  updateUserPayload: GQLupdateUserPayload;
  deleteUserPayload: GQLdeleteUserPayload;
  ComponentRecipesIngredients: GQLComponentRecipesIngredients;
}

export interface GQLInputID {
  id: string;
}

export const enum GQLPublicationState {
  LIVE = 'LIVE',
  PREVIEW = 'PREVIEW'
}

export interface GQLAdminUser {
  id: string;
  username?: string;
  firstname: string;
  lastname: string;
}

export interface GQLQuery {
  recipe?: GQLRecipe;
  recipes?: Array<GQLRecipe | null>;
  recipesConnection?: GQLRecipeConnection;
  tag?: GQLTags;
  tags?: Array<GQLTags | null>;
  tagsConnection?: GQLTagsConnection;
  usersFavoriteRecipe?: GQLUsersFavoriteRecipes;
  usersFavoriteRecipes?: Array<GQLUsersFavoriteRecipes | null>;
  usersFavoriteRecipesConnection?: GQLUsersFavoriteRecipesConnection;
  usersViewedRecipe?: GQLUsersViewedRecipes;
  usersViewedRecipes?: Array<GQLUsersViewedRecipes | null>;
  usersViewedRecipesConnection?: GQLUsersViewedRecipesConnection;
  files?: Array<GQLUploadFile | null>;
  filesConnection?: GQLUploadFileConnection;
  role?: GQLUsersPermissionsRole;
  
  /**
   * Retrieve all the existing roles. You can't apply filters on this query.
   */
  roles?: Array<GQLUsersPermissionsRole | null>;
  rolesConnection?: GQLUsersPermissionsRoleConnection;
  user?: GQLUsersPermissionsUser;
  users?: Array<GQLUsersPermissionsUser | null>;
  usersConnection?: GQLUsersPermissionsUserConnection;
  me?: GQLUsersPermissionsMe;
}

export interface GQLMutation {
  createRecipe?: GQLcreateRecipePayload;
  updateRecipe?: GQLupdateRecipePayload;
  deleteRecipe?: GQLdeleteRecipePayload;
  createTag?: GQLcreateTagPayload;
  updateTag?: GQLupdateTagPayload;
  deleteTag?: GQLdeleteTagPayload;
  createUsersFavoriteRecipe?: GQLcreateUsersFavoriteRecipePayload;
  updateUsersFavoriteRecipe?: GQLupdateUsersFavoriteRecipePayload;
  deleteUsersFavoriteRecipe?: GQLdeleteUsersFavoriteRecipePayload;
  createUsersViewedRecipe?: GQLcreateUsersViewedRecipePayload;
  updateUsersViewedRecipe?: GQLupdateUsersViewedRecipePayload;
  deleteUsersViewedRecipe?: GQLdeleteUsersViewedRecipePayload;
  
  /**
   * Delete one file
   */
  deleteFile?: GQLdeleteFilePayload;
  
  /**
   * Create a new role
   */
  createRole?: GQLcreateRolePayload;
  
  /**
   * Update an existing role
   */
  updateRole?: GQLupdateRolePayload;
  
  /**
   * Delete an existing role
   */
  deleteRole?: GQLdeleteRolePayload;
  
  /**
   * Create a new user
   */
  createUser?: GQLcreateUserPayload;
  
  /**
   * Update an existing user
   */
  updateUser?: GQLupdateUserPayload;
  
  /**
   * Delete an existing user
   */
  deleteUser?: GQLdeleteUserPayload;
  upload: GQLUploadFile;
  multipleUpload: Array<GQLUploadFile | null>;
  updateFileInfo: GQLUploadFile;
  login: GQLUsersPermissionsLoginPayload;
  register: GQLUsersPermissionsLoginPayload;
  forgotPassword?: GQLUserPermissionsPasswordPayload;
  resetPassword?: GQLUsersPermissionsLoginPayload;
  emailConfirmation?: GQLUsersPermissionsLoginPayload;
}

/**
 * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
 */
export type GQLJSON = any;

/**
 * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
 */
export type GQLDateTime = any;

/**
 * A time string with format: HH:mm:ss.SSS
 */
export type GQLTime = any;

/**
 * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
 */
export type GQLDate = any;

/**
 * The `Long` scalar type represents 52-bit integers
 */
export type GQLLong = any;

/**
 * The `Upload` scalar type represents a file upload.
 */
export type GQLUpload = any;

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  UsersPermissionsMe?: GQLUsersPermissionsMeTypeResolver;
  UsersPermissionsMeRole?: GQLUsersPermissionsMeRoleTypeResolver;
  UsersPermissionsLoginPayload?: GQLUsersPermissionsLoginPayloadTypeResolver;
  UserPermissionsPasswordPayload?: GQLUserPermissionsPasswordPayloadTypeResolver;
  Recipe?: GQLRecipeTypeResolver;
  RecipeConnection?: GQLRecipeConnectionTypeResolver;
  RecipeAggregator?: GQLRecipeAggregatorTypeResolver;
  RecipeAggregatorSum?: GQLRecipeAggregatorSumTypeResolver;
  RecipeAggregatorAvg?: GQLRecipeAggregatorAvgTypeResolver;
  RecipeAggregatorMin?: GQLRecipeAggregatorMinTypeResolver;
  RecipeAggregatorMax?: GQLRecipeAggregatorMaxTypeResolver;
  RecipeGroupBy?: GQLRecipeGroupByTypeResolver;
  RecipeConnectionId?: GQLRecipeConnectionIdTypeResolver;
  RecipeConnectionCreated_at?: GQLRecipeConnectionCreated_atTypeResolver;
  RecipeConnectionUpdated_at?: GQLRecipeConnectionUpdated_atTypeResolver;
  RecipeConnectionTitle?: GQLRecipeConnectionTitleTypeResolver;
  RecipeConnectionSlug?: GQLRecipeConnectionSlugTypeResolver;
  RecipeConnectionImage?: GQLRecipeConnectionImageTypeResolver;
  RecipeConnectionNotes?: GQLRecipeConnectionNotesTypeResolver;
  RecipeConnectionTime?: GQLRecipeConnectionTimeTypeResolver;
  RecipeConnectionQuantity?: GQLRecipeConnectionQuantityTypeResolver;
  RecipeConnectionSteps?: GQLRecipeConnectionStepsTypeResolver;
  RecipeConnectionAuthor?: GQLRecipeConnectionAuthorTypeResolver;
  RecipeConnectionPublished_at?: GQLRecipeConnectionPublished_atTypeResolver;
  createRecipePayload?: GQLcreateRecipePayloadTypeResolver;
  updateRecipePayload?: GQLupdateRecipePayloadTypeResolver;
  deleteRecipePayload?: GQLdeleteRecipePayloadTypeResolver;
  Tags?: GQLTagsTypeResolver;
  TagsConnection?: GQLTagsConnectionTypeResolver;
  TagsAggregator?: GQLTagsAggregatorTypeResolver;
  TagsGroupBy?: GQLTagsGroupByTypeResolver;
  TagsConnectionId?: GQLTagsConnectionIdTypeResolver;
  TagsConnectionCreated_at?: GQLTagsConnectionCreated_atTypeResolver;
  TagsConnectionUpdated_at?: GQLTagsConnectionUpdated_atTypeResolver;
  TagsConnectionTitle?: GQLTagsConnectionTitleTypeResolver;
  TagsConnectionSlug?: GQLTagsConnectionSlugTypeResolver;
  createTagPayload?: GQLcreateTagPayloadTypeResolver;
  updateTagPayload?: GQLupdateTagPayloadTypeResolver;
  deleteTagPayload?: GQLdeleteTagPayloadTypeResolver;
  UsersFavoriteRecipes?: GQLUsersFavoriteRecipesTypeResolver;
  UsersFavoriteRecipesConnection?: GQLUsersFavoriteRecipesConnectionTypeResolver;
  UsersFavoriteRecipesAggregator?: GQLUsersFavoriteRecipesAggregatorTypeResolver;
  UsersFavoriteRecipesGroupBy?: GQLUsersFavoriteRecipesGroupByTypeResolver;
  UsersFavoriteRecipesConnectionId?: GQLUsersFavoriteRecipesConnectionIdTypeResolver;
  UsersFavoriteRecipesConnectionCreated_at?: GQLUsersFavoriteRecipesConnectionCreated_atTypeResolver;
  UsersFavoriteRecipesConnectionUpdated_at?: GQLUsersFavoriteRecipesConnectionUpdated_atTypeResolver;
  UsersFavoriteRecipesConnectionUser?: GQLUsersFavoriteRecipesConnectionUserTypeResolver;
  UsersFavoriteRecipesConnectionRecipe?: GQLUsersFavoriteRecipesConnectionRecipeTypeResolver;
  createUsersFavoriteRecipePayload?: GQLcreateUsersFavoriteRecipePayloadTypeResolver;
  updateUsersFavoriteRecipePayload?: GQLupdateUsersFavoriteRecipePayloadTypeResolver;
  deleteUsersFavoriteRecipePayload?: GQLdeleteUsersFavoriteRecipePayloadTypeResolver;
  UsersViewedRecipes?: GQLUsersViewedRecipesTypeResolver;
  UsersViewedRecipesConnection?: GQLUsersViewedRecipesConnectionTypeResolver;
  UsersViewedRecipesAggregator?: GQLUsersViewedRecipesAggregatorTypeResolver;
  UsersViewedRecipesGroupBy?: GQLUsersViewedRecipesGroupByTypeResolver;
  UsersViewedRecipesConnectionId?: GQLUsersViewedRecipesConnectionIdTypeResolver;
  UsersViewedRecipesConnectionCreated_at?: GQLUsersViewedRecipesConnectionCreated_atTypeResolver;
  UsersViewedRecipesConnectionUpdated_at?: GQLUsersViewedRecipesConnectionUpdated_atTypeResolver;
  UsersViewedRecipesConnectionUser?: GQLUsersViewedRecipesConnectionUserTypeResolver;
  UsersViewedRecipesConnectionRecipe?: GQLUsersViewedRecipesConnectionRecipeTypeResolver;
  createUsersViewedRecipePayload?: GQLcreateUsersViewedRecipePayloadTypeResolver;
  updateUsersViewedRecipePayload?: GQLupdateUsersViewedRecipePayloadTypeResolver;
  deleteUsersViewedRecipePayload?: GQLdeleteUsersViewedRecipePayloadTypeResolver;
  UploadFile?: GQLUploadFileTypeResolver;
  UploadFileConnection?: GQLUploadFileConnectionTypeResolver;
  UploadFileAggregator?: GQLUploadFileAggregatorTypeResolver;
  UploadFileAggregatorSum?: GQLUploadFileAggregatorSumTypeResolver;
  UploadFileAggregatorAvg?: GQLUploadFileAggregatorAvgTypeResolver;
  UploadFileAggregatorMin?: GQLUploadFileAggregatorMinTypeResolver;
  UploadFileAggregatorMax?: GQLUploadFileAggregatorMaxTypeResolver;
  UploadFileGroupBy?: GQLUploadFileGroupByTypeResolver;
  UploadFileConnectionId?: GQLUploadFileConnectionIdTypeResolver;
  UploadFileConnectionCreated_at?: GQLUploadFileConnectionCreated_atTypeResolver;
  UploadFileConnectionUpdated_at?: GQLUploadFileConnectionUpdated_atTypeResolver;
  UploadFileConnectionName?: GQLUploadFileConnectionNameTypeResolver;
  UploadFileConnectionAlternativeText?: GQLUploadFileConnectionAlternativeTextTypeResolver;
  UploadFileConnectionCaption?: GQLUploadFileConnectionCaptionTypeResolver;
  UploadFileConnectionWidth?: GQLUploadFileConnectionWidthTypeResolver;
  UploadFileConnectionHeight?: GQLUploadFileConnectionHeightTypeResolver;
  UploadFileConnectionFormats?: GQLUploadFileConnectionFormatsTypeResolver;
  UploadFileConnectionHash?: GQLUploadFileConnectionHashTypeResolver;
  UploadFileConnectionExt?: GQLUploadFileConnectionExtTypeResolver;
  UploadFileConnectionMime?: GQLUploadFileConnectionMimeTypeResolver;
  UploadFileConnectionSize?: GQLUploadFileConnectionSizeTypeResolver;
  UploadFileConnectionUrl?: GQLUploadFileConnectionUrlTypeResolver;
  UploadFileConnectionPreviewUrl?: GQLUploadFileConnectionPreviewUrlTypeResolver;
  UploadFileConnectionProvider?: GQLUploadFileConnectionProviderTypeResolver;
  UploadFileConnectionProvider_metadata?: GQLUploadFileConnectionProvider_metadataTypeResolver;
  deleteFilePayload?: GQLdeleteFilePayloadTypeResolver;
  UsersPermissionsPermission?: GQLUsersPermissionsPermissionTypeResolver;
  UsersPermissionsRole?: GQLUsersPermissionsRoleTypeResolver;
  UsersPermissionsRoleConnection?: GQLUsersPermissionsRoleConnectionTypeResolver;
  UsersPermissionsRoleAggregator?: GQLUsersPermissionsRoleAggregatorTypeResolver;
  UsersPermissionsRoleGroupBy?: GQLUsersPermissionsRoleGroupByTypeResolver;
  UsersPermissionsRoleConnectionId?: GQLUsersPermissionsRoleConnectionIdTypeResolver;
  UsersPermissionsRoleConnectionName?: GQLUsersPermissionsRoleConnectionNameTypeResolver;
  UsersPermissionsRoleConnectionDescription?: GQLUsersPermissionsRoleConnectionDescriptionTypeResolver;
  UsersPermissionsRoleConnectionType?: GQLUsersPermissionsRoleConnectionTypeTypeResolver;
  createRolePayload?: GQLcreateRolePayloadTypeResolver;
  updateRolePayload?: GQLupdateRolePayloadTypeResolver;
  deleteRolePayload?: GQLdeleteRolePayloadTypeResolver;
  UsersPermissionsUser?: GQLUsersPermissionsUserTypeResolver;
  UsersPermissionsUserConnection?: GQLUsersPermissionsUserConnectionTypeResolver;
  UsersPermissionsUserAggregator?: GQLUsersPermissionsUserAggregatorTypeResolver;
  UsersPermissionsUserGroupBy?: GQLUsersPermissionsUserGroupByTypeResolver;
  UsersPermissionsUserConnectionId?: GQLUsersPermissionsUserConnectionIdTypeResolver;
  UsersPermissionsUserConnectionCreated_at?: GQLUsersPermissionsUserConnectionCreated_atTypeResolver;
  UsersPermissionsUserConnectionUpdated_at?: GQLUsersPermissionsUserConnectionUpdated_atTypeResolver;
  UsersPermissionsUserConnectionUsername?: GQLUsersPermissionsUserConnectionUsernameTypeResolver;
  UsersPermissionsUserConnectionEmail?: GQLUsersPermissionsUserConnectionEmailTypeResolver;
  UsersPermissionsUserConnectionProvider?: GQLUsersPermissionsUserConnectionProviderTypeResolver;
  UsersPermissionsUserConnectionConfirmed?: GQLUsersPermissionsUserConnectionConfirmedTypeResolver;
  UsersPermissionsUserConnectionBlocked?: GQLUsersPermissionsUserConnectionBlockedTypeResolver;
  UsersPermissionsUserConnectionRole?: GQLUsersPermissionsUserConnectionRoleTypeResolver;
  UsersPermissionsUserConnectionAvatar?: GQLUsersPermissionsUserConnectionAvatarTypeResolver;
  createUserPayload?: GQLcreateUserPayloadTypeResolver;
  updateUserPayload?: GQLupdateUserPayloadTypeResolver;
  deleteUserPayload?: GQLdeleteUserPayloadTypeResolver;
  ComponentRecipesIngredients?: GQLComponentRecipesIngredientsTypeResolver;
  Morph?: {
    __resolveType: GQLMorphTypeResolver
  };
  
  AdminUser?: GQLAdminUserTypeResolver;
  Query?: GQLQueryTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  JSON?: GraphQLScalarType;
  DateTime?: GraphQLScalarType;
  Time?: GraphQLScalarType;
  Date?: GraphQLScalarType;
  Long?: GraphQLScalarType;
  Upload?: GraphQLScalarType;
}
export interface GQLUsersPermissionsMeTypeResolver<TParent = any> {
  id?: UsersPermissionsMeToIdResolver<TParent>;
  username?: UsersPermissionsMeToUsernameResolver<TParent>;
  email?: UsersPermissionsMeToEmailResolver<TParent>;
  confirmed?: UsersPermissionsMeToConfirmedResolver<TParent>;
  blocked?: UsersPermissionsMeToBlockedResolver<TParent>;
  role?: UsersPermissionsMeToRoleResolver<TParent>;
  user?: UsersPermissionsMeToUserResolver<TParent>;
}

export interface UsersPermissionsMeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsMeToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsMeToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsMeToConfirmedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsMeToBlockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsMeToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsMeToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsMeRoleTypeResolver<TParent = any> {
  id?: UsersPermissionsMeRoleToIdResolver<TParent>;
  name?: UsersPermissionsMeRoleToNameResolver<TParent>;
  description?: UsersPermissionsMeRoleToDescriptionResolver<TParent>;
  type?: UsersPermissionsMeRoleToTypeResolver<TParent>;
}

export interface UsersPermissionsMeRoleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsMeRoleToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsMeRoleToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsMeRoleToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsLoginPayloadTypeResolver<TParent = any> {
  jwt?: UsersPermissionsLoginPayloadToJwtResolver<TParent>;
  user?: UsersPermissionsLoginPayloadToUserResolver<TParent>;
}

export interface UsersPermissionsLoginPayloadToJwtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsLoginPayloadToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserPermissionsPasswordPayloadTypeResolver<TParent = any> {
  ok?: UserPermissionsPasswordPayloadToOkResolver<TParent>;
}

export interface UserPermissionsPasswordPayloadToOkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeTypeResolver<TParent = any> {
  id?: RecipeToIdResolver<TParent>;
  created_at?: RecipeToCreated_atResolver<TParent>;
  updated_at?: RecipeToUpdated_atResolver<TParent>;
  title?: RecipeToTitleResolver<TParent>;
  slug?: RecipeToSlugResolver<TParent>;
  image?: RecipeToImageResolver<TParent>;
  notes?: RecipeToNotesResolver<TParent>;
  time?: RecipeToTimeResolver<TParent>;
  quantity?: RecipeToQuantityResolver<TParent>;
  steps?: RecipeToStepsResolver<TParent>;
  ingredients?: RecipeToIngredientsResolver<TParent>;
  author?: RecipeToAuthorResolver<TParent>;
  published_at?: RecipeToPublished_atResolver<TParent>;
  tags?: RecipeToTagsResolver<TParent>;
}

export interface RecipeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToNotesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToStepsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToIngredientsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToPublished_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeToTagsArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface RecipeToTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RecipeToTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionTypeResolver<TParent = any> {
  values?: RecipeConnectionToValuesResolver<TParent>;
  groupBy?: RecipeConnectionToGroupByResolver<TParent>;
  aggregate?: RecipeConnectionToAggregateResolver<TParent>;
}

export interface RecipeConnectionToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionToGroupByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionToAggregateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeAggregatorTypeResolver<TParent = any> {
  count?: RecipeAggregatorToCountResolver<TParent>;
  totalCount?: RecipeAggregatorToTotalCountResolver<TParent>;
  sum?: RecipeAggregatorToSumResolver<TParent>;
  avg?: RecipeAggregatorToAvgResolver<TParent>;
  min?: RecipeAggregatorToMinResolver<TParent>;
  max?: RecipeAggregatorToMaxResolver<TParent>;
}

export interface RecipeAggregatorToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeAggregatorToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeAggregatorToSumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeAggregatorToAvgResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeAggregatorToMinResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeAggregatorToMaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeAggregatorSumTypeResolver<TParent = any> {
  time?: RecipeAggregatorSumToTimeResolver<TParent>;
  quantity?: RecipeAggregatorSumToQuantityResolver<TParent>;
}

export interface RecipeAggregatorSumToTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeAggregatorSumToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeAggregatorAvgTypeResolver<TParent = any> {
  time?: RecipeAggregatorAvgToTimeResolver<TParent>;
  quantity?: RecipeAggregatorAvgToQuantityResolver<TParent>;
}

export interface RecipeAggregatorAvgToTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeAggregatorAvgToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeAggregatorMinTypeResolver<TParent = any> {
  time?: RecipeAggregatorMinToTimeResolver<TParent>;
  quantity?: RecipeAggregatorMinToQuantityResolver<TParent>;
}

export interface RecipeAggregatorMinToTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeAggregatorMinToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeAggregatorMaxTypeResolver<TParent = any> {
  time?: RecipeAggregatorMaxToTimeResolver<TParent>;
  quantity?: RecipeAggregatorMaxToQuantityResolver<TParent>;
}

export interface RecipeAggregatorMaxToTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeAggregatorMaxToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeGroupByTypeResolver<TParent = any> {
  id?: RecipeGroupByToIdResolver<TParent>;
  created_at?: RecipeGroupByToCreated_atResolver<TParent>;
  updated_at?: RecipeGroupByToUpdated_atResolver<TParent>;
  title?: RecipeGroupByToTitleResolver<TParent>;
  slug?: RecipeGroupByToSlugResolver<TParent>;
  image?: RecipeGroupByToImageResolver<TParent>;
  notes?: RecipeGroupByToNotesResolver<TParent>;
  time?: RecipeGroupByToTimeResolver<TParent>;
  quantity?: RecipeGroupByToQuantityResolver<TParent>;
  steps?: RecipeGroupByToStepsResolver<TParent>;
  author?: RecipeGroupByToAuthorResolver<TParent>;
  published_at?: RecipeGroupByToPublished_atResolver<TParent>;
}

export interface RecipeGroupByToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeGroupByToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeGroupByToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeGroupByToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeGroupByToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeGroupByToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeGroupByToNotesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeGroupByToTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeGroupByToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeGroupByToStepsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeGroupByToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeGroupByToPublished_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionIdTypeResolver<TParent = any> {
  key?: RecipeConnectionIdToKeyResolver<TParent>;
  connection?: RecipeConnectionIdToConnectionResolver<TParent>;
}

export interface RecipeConnectionIdToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionIdToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionCreated_atTypeResolver<TParent = any> {
  key?: RecipeConnectionCreated_atToKeyResolver<TParent>;
  connection?: RecipeConnectionCreated_atToConnectionResolver<TParent>;
}

export interface RecipeConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionUpdated_atTypeResolver<TParent = any> {
  key?: RecipeConnectionUpdated_atToKeyResolver<TParent>;
  connection?: RecipeConnectionUpdated_atToConnectionResolver<TParent>;
}

export interface RecipeConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionTitleTypeResolver<TParent = any> {
  key?: RecipeConnectionTitleToKeyResolver<TParent>;
  connection?: RecipeConnectionTitleToConnectionResolver<TParent>;
}

export interface RecipeConnectionTitleToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionTitleToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionSlugTypeResolver<TParent = any> {
  key?: RecipeConnectionSlugToKeyResolver<TParent>;
  connection?: RecipeConnectionSlugToConnectionResolver<TParent>;
}

export interface RecipeConnectionSlugToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionSlugToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionImageTypeResolver<TParent = any> {
  key?: RecipeConnectionImageToKeyResolver<TParent>;
  connection?: RecipeConnectionImageToConnectionResolver<TParent>;
}

export interface RecipeConnectionImageToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionImageToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionNotesTypeResolver<TParent = any> {
  key?: RecipeConnectionNotesToKeyResolver<TParent>;
  connection?: RecipeConnectionNotesToConnectionResolver<TParent>;
}

export interface RecipeConnectionNotesToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionNotesToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionTimeTypeResolver<TParent = any> {
  key?: RecipeConnectionTimeToKeyResolver<TParent>;
  connection?: RecipeConnectionTimeToConnectionResolver<TParent>;
}

export interface RecipeConnectionTimeToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionTimeToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionQuantityTypeResolver<TParent = any> {
  key?: RecipeConnectionQuantityToKeyResolver<TParent>;
  connection?: RecipeConnectionQuantityToConnectionResolver<TParent>;
}

export interface RecipeConnectionQuantityToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionQuantityToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionStepsTypeResolver<TParent = any> {
  key?: RecipeConnectionStepsToKeyResolver<TParent>;
  connection?: RecipeConnectionStepsToConnectionResolver<TParent>;
}

export interface RecipeConnectionStepsToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionStepsToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionAuthorTypeResolver<TParent = any> {
  key?: RecipeConnectionAuthorToKeyResolver<TParent>;
  connection?: RecipeConnectionAuthorToConnectionResolver<TParent>;
}

export interface RecipeConnectionAuthorToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionAuthorToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecipeConnectionPublished_atTypeResolver<TParent = any> {
  key?: RecipeConnectionPublished_atToKeyResolver<TParent>;
  connection?: RecipeConnectionPublished_atToConnectionResolver<TParent>;
}

export interface RecipeConnectionPublished_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecipeConnectionPublished_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLcreateRecipePayloadTypeResolver<TParent = any> {
  recipe?: createRecipePayloadToRecipeResolver<TParent>;
}

export interface createRecipePayloadToRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLupdateRecipePayloadTypeResolver<TParent = any> {
  recipe?: updateRecipePayloadToRecipeResolver<TParent>;
}

export interface updateRecipePayloadToRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeleteRecipePayloadTypeResolver<TParent = any> {
  recipe?: deleteRecipePayloadToRecipeResolver<TParent>;
}

export interface deleteRecipePayloadToRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagsTypeResolver<TParent = any> {
  id?: TagsToIdResolver<TParent>;
  created_at?: TagsToCreated_atResolver<TParent>;
  updated_at?: TagsToUpdated_atResolver<TParent>;
  title?: TagsToTitleResolver<TParent>;
  slug?: TagsToSlugResolver<TParent>;
  recipes?: TagsToRecipesResolver<TParent>;
}

export interface TagsToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsToRecipesArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface TagsToRecipesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TagsToRecipesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagsConnectionTypeResolver<TParent = any> {
  values?: TagsConnectionToValuesResolver<TParent>;
  groupBy?: TagsConnectionToGroupByResolver<TParent>;
  aggregate?: TagsConnectionToAggregateResolver<TParent>;
}

export interface TagsConnectionToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsConnectionToGroupByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsConnectionToAggregateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagsAggregatorTypeResolver<TParent = any> {
  count?: TagsAggregatorToCountResolver<TParent>;
  totalCount?: TagsAggregatorToTotalCountResolver<TParent>;
}

export interface TagsAggregatorToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsAggregatorToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagsGroupByTypeResolver<TParent = any> {
  id?: TagsGroupByToIdResolver<TParent>;
  created_at?: TagsGroupByToCreated_atResolver<TParent>;
  updated_at?: TagsGroupByToUpdated_atResolver<TParent>;
  title?: TagsGroupByToTitleResolver<TParent>;
  slug?: TagsGroupByToSlugResolver<TParent>;
}

export interface TagsGroupByToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsGroupByToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsGroupByToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsGroupByToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsGroupByToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagsConnectionIdTypeResolver<TParent = any> {
  key?: TagsConnectionIdToKeyResolver<TParent>;
  connection?: TagsConnectionIdToConnectionResolver<TParent>;
}

export interface TagsConnectionIdToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsConnectionIdToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagsConnectionCreated_atTypeResolver<TParent = any> {
  key?: TagsConnectionCreated_atToKeyResolver<TParent>;
  connection?: TagsConnectionCreated_atToConnectionResolver<TParent>;
}

export interface TagsConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagsConnectionUpdated_atTypeResolver<TParent = any> {
  key?: TagsConnectionUpdated_atToKeyResolver<TParent>;
  connection?: TagsConnectionUpdated_atToConnectionResolver<TParent>;
}

export interface TagsConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagsConnectionTitleTypeResolver<TParent = any> {
  key?: TagsConnectionTitleToKeyResolver<TParent>;
  connection?: TagsConnectionTitleToConnectionResolver<TParent>;
}

export interface TagsConnectionTitleToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsConnectionTitleToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagsConnectionSlugTypeResolver<TParent = any> {
  key?: TagsConnectionSlugToKeyResolver<TParent>;
  connection?: TagsConnectionSlugToConnectionResolver<TParent>;
}

export interface TagsConnectionSlugToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagsConnectionSlugToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLcreateTagPayloadTypeResolver<TParent = any> {
  tag?: createTagPayloadToTagResolver<TParent>;
}

export interface createTagPayloadToTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLupdateTagPayloadTypeResolver<TParent = any> {
  tag?: updateTagPayloadToTagResolver<TParent>;
}

export interface updateTagPayloadToTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeleteTagPayloadTypeResolver<TParent = any> {
  tag?: deleteTagPayloadToTagResolver<TParent>;
}

export interface deleteTagPayloadToTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersFavoriteRecipesTypeResolver<TParent = any> {
  id?: UsersFavoriteRecipesToIdResolver<TParent>;
  created_at?: UsersFavoriteRecipesToCreated_atResolver<TParent>;
  updated_at?: UsersFavoriteRecipesToUpdated_atResolver<TParent>;
  user?: UsersFavoriteRecipesToUserResolver<TParent>;
  recipe?: UsersFavoriteRecipesToRecipeResolver<TParent>;
}

export interface UsersFavoriteRecipesToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesToRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersFavoriteRecipesConnectionTypeResolver<TParent = any> {
  values?: UsersFavoriteRecipesConnectionToValuesResolver<TParent>;
  groupBy?: UsersFavoriteRecipesConnectionToGroupByResolver<TParent>;
  aggregate?: UsersFavoriteRecipesConnectionToAggregateResolver<TParent>;
}

export interface UsersFavoriteRecipesConnectionToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesConnectionToGroupByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesConnectionToAggregateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersFavoriteRecipesAggregatorTypeResolver<TParent = any> {
  count?: UsersFavoriteRecipesAggregatorToCountResolver<TParent>;
  totalCount?: UsersFavoriteRecipesAggregatorToTotalCountResolver<TParent>;
}

export interface UsersFavoriteRecipesAggregatorToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesAggregatorToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersFavoriteRecipesGroupByTypeResolver<TParent = any> {
  id?: UsersFavoriteRecipesGroupByToIdResolver<TParent>;
  created_at?: UsersFavoriteRecipesGroupByToCreated_atResolver<TParent>;
  updated_at?: UsersFavoriteRecipesGroupByToUpdated_atResolver<TParent>;
  user?: UsersFavoriteRecipesGroupByToUserResolver<TParent>;
  recipe?: UsersFavoriteRecipesGroupByToRecipeResolver<TParent>;
}

export interface UsersFavoriteRecipesGroupByToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesGroupByToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesGroupByToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesGroupByToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesGroupByToRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersFavoriteRecipesConnectionIdTypeResolver<TParent = any> {
  key?: UsersFavoriteRecipesConnectionIdToKeyResolver<TParent>;
  connection?: UsersFavoriteRecipesConnectionIdToConnectionResolver<TParent>;
}

export interface UsersFavoriteRecipesConnectionIdToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesConnectionIdToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersFavoriteRecipesConnectionCreated_atTypeResolver<TParent = any> {
  key?: UsersFavoriteRecipesConnectionCreated_atToKeyResolver<TParent>;
  connection?: UsersFavoriteRecipesConnectionCreated_atToConnectionResolver<TParent>;
}

export interface UsersFavoriteRecipesConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersFavoriteRecipesConnectionUpdated_atTypeResolver<TParent = any> {
  key?: UsersFavoriteRecipesConnectionUpdated_atToKeyResolver<TParent>;
  connection?: UsersFavoriteRecipesConnectionUpdated_atToConnectionResolver<TParent>;
}

export interface UsersFavoriteRecipesConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersFavoriteRecipesConnectionUserTypeResolver<TParent = any> {
  key?: UsersFavoriteRecipesConnectionUserToKeyResolver<TParent>;
  connection?: UsersFavoriteRecipesConnectionUserToConnectionResolver<TParent>;
}

export interface UsersFavoriteRecipesConnectionUserToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesConnectionUserToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersFavoriteRecipesConnectionRecipeTypeResolver<TParent = any> {
  key?: UsersFavoriteRecipesConnectionRecipeToKeyResolver<TParent>;
  connection?: UsersFavoriteRecipesConnectionRecipeToConnectionResolver<TParent>;
}

export interface UsersFavoriteRecipesConnectionRecipeToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersFavoriteRecipesConnectionRecipeToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLcreateUsersFavoriteRecipePayloadTypeResolver<TParent = any> {
  usersFavoriteRecipe?: createUsersFavoriteRecipePayloadToUsersFavoriteRecipeResolver<TParent>;
}

export interface createUsersFavoriteRecipePayloadToUsersFavoriteRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLupdateUsersFavoriteRecipePayloadTypeResolver<TParent = any> {
  usersFavoriteRecipe?: updateUsersFavoriteRecipePayloadToUsersFavoriteRecipeResolver<TParent>;
}

export interface updateUsersFavoriteRecipePayloadToUsersFavoriteRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeleteUsersFavoriteRecipePayloadTypeResolver<TParent = any> {
  usersFavoriteRecipe?: deleteUsersFavoriteRecipePayloadToUsersFavoriteRecipeResolver<TParent>;
}

export interface deleteUsersFavoriteRecipePayloadToUsersFavoriteRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersViewedRecipesTypeResolver<TParent = any> {
  id?: UsersViewedRecipesToIdResolver<TParent>;
  created_at?: UsersViewedRecipesToCreated_atResolver<TParent>;
  updated_at?: UsersViewedRecipesToUpdated_atResolver<TParent>;
  user?: UsersViewedRecipesToUserResolver<TParent>;
  recipe?: UsersViewedRecipesToRecipeResolver<TParent>;
}

export interface UsersViewedRecipesToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesToRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersViewedRecipesConnectionTypeResolver<TParent = any> {
  values?: UsersViewedRecipesConnectionToValuesResolver<TParent>;
  groupBy?: UsersViewedRecipesConnectionToGroupByResolver<TParent>;
  aggregate?: UsersViewedRecipesConnectionToAggregateResolver<TParent>;
}

export interface UsersViewedRecipesConnectionToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesConnectionToGroupByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesConnectionToAggregateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersViewedRecipesAggregatorTypeResolver<TParent = any> {
  count?: UsersViewedRecipesAggregatorToCountResolver<TParent>;
  totalCount?: UsersViewedRecipesAggregatorToTotalCountResolver<TParent>;
}

export interface UsersViewedRecipesAggregatorToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesAggregatorToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersViewedRecipesGroupByTypeResolver<TParent = any> {
  id?: UsersViewedRecipesGroupByToIdResolver<TParent>;
  created_at?: UsersViewedRecipesGroupByToCreated_atResolver<TParent>;
  updated_at?: UsersViewedRecipesGroupByToUpdated_atResolver<TParent>;
  user?: UsersViewedRecipesGroupByToUserResolver<TParent>;
  recipe?: UsersViewedRecipesGroupByToRecipeResolver<TParent>;
}

export interface UsersViewedRecipesGroupByToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesGroupByToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesGroupByToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesGroupByToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesGroupByToRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersViewedRecipesConnectionIdTypeResolver<TParent = any> {
  key?: UsersViewedRecipesConnectionIdToKeyResolver<TParent>;
  connection?: UsersViewedRecipesConnectionIdToConnectionResolver<TParent>;
}

export interface UsersViewedRecipesConnectionIdToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesConnectionIdToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersViewedRecipesConnectionCreated_atTypeResolver<TParent = any> {
  key?: UsersViewedRecipesConnectionCreated_atToKeyResolver<TParent>;
  connection?: UsersViewedRecipesConnectionCreated_atToConnectionResolver<TParent>;
}

export interface UsersViewedRecipesConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersViewedRecipesConnectionUpdated_atTypeResolver<TParent = any> {
  key?: UsersViewedRecipesConnectionUpdated_atToKeyResolver<TParent>;
  connection?: UsersViewedRecipesConnectionUpdated_atToConnectionResolver<TParent>;
}

export interface UsersViewedRecipesConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersViewedRecipesConnectionUserTypeResolver<TParent = any> {
  key?: UsersViewedRecipesConnectionUserToKeyResolver<TParent>;
  connection?: UsersViewedRecipesConnectionUserToConnectionResolver<TParent>;
}

export interface UsersViewedRecipesConnectionUserToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesConnectionUserToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersViewedRecipesConnectionRecipeTypeResolver<TParent = any> {
  key?: UsersViewedRecipesConnectionRecipeToKeyResolver<TParent>;
  connection?: UsersViewedRecipesConnectionRecipeToConnectionResolver<TParent>;
}

export interface UsersViewedRecipesConnectionRecipeToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersViewedRecipesConnectionRecipeToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLcreateUsersViewedRecipePayloadTypeResolver<TParent = any> {
  usersViewedRecipe?: createUsersViewedRecipePayloadToUsersViewedRecipeResolver<TParent>;
}

export interface createUsersViewedRecipePayloadToUsersViewedRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLupdateUsersViewedRecipePayloadTypeResolver<TParent = any> {
  usersViewedRecipe?: updateUsersViewedRecipePayloadToUsersViewedRecipeResolver<TParent>;
}

export interface updateUsersViewedRecipePayloadToUsersViewedRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeleteUsersViewedRecipePayloadTypeResolver<TParent = any> {
  usersViewedRecipe?: deleteUsersViewedRecipePayloadToUsersViewedRecipeResolver<TParent>;
}

export interface deleteUsersViewedRecipePayloadToUsersViewedRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileTypeResolver<TParent = any> {
  id?: UploadFileToIdResolver<TParent>;
  created_at?: UploadFileToCreated_atResolver<TParent>;
  updated_at?: UploadFileToUpdated_atResolver<TParent>;
  name?: UploadFileToNameResolver<TParent>;
  alternativeText?: UploadFileToAlternativeTextResolver<TParent>;
  caption?: UploadFileToCaptionResolver<TParent>;
  width?: UploadFileToWidthResolver<TParent>;
  height?: UploadFileToHeightResolver<TParent>;
  formats?: UploadFileToFormatsResolver<TParent>;
  hash?: UploadFileToHashResolver<TParent>;
  ext?: UploadFileToExtResolver<TParent>;
  mime?: UploadFileToMimeResolver<TParent>;
  size?: UploadFileToSizeResolver<TParent>;
  url?: UploadFileToUrlResolver<TParent>;
  previewUrl?: UploadFileToPreviewUrlResolver<TParent>;
  provider?: UploadFileToProviderResolver<TParent>;
  provider_metadata?: UploadFileToProvider_metadataResolver<TParent>;
  related?: UploadFileToRelatedResolver<TParent>;
}

export interface UploadFileToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToAlternativeTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToCaptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToWidthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToHeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToFormatsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToHashResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToExtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToMimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToPreviewUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToProvider_metadataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileToRelatedArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface UploadFileToRelatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UploadFileToRelatedArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionTypeResolver<TParent = any> {
  values?: UploadFileConnectionToValuesResolver<TParent>;
  groupBy?: UploadFileConnectionToGroupByResolver<TParent>;
  aggregate?: UploadFileConnectionToAggregateResolver<TParent>;
}

export interface UploadFileConnectionToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionToGroupByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionToAggregateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileAggregatorTypeResolver<TParent = any> {
  count?: UploadFileAggregatorToCountResolver<TParent>;
  totalCount?: UploadFileAggregatorToTotalCountResolver<TParent>;
  sum?: UploadFileAggregatorToSumResolver<TParent>;
  avg?: UploadFileAggregatorToAvgResolver<TParent>;
  min?: UploadFileAggregatorToMinResolver<TParent>;
  max?: UploadFileAggregatorToMaxResolver<TParent>;
}

export interface UploadFileAggregatorToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorToSumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorToAvgResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorToMinResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorToMaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileAggregatorSumTypeResolver<TParent = any> {
  width?: UploadFileAggregatorSumToWidthResolver<TParent>;
  height?: UploadFileAggregatorSumToHeightResolver<TParent>;
  size?: UploadFileAggregatorSumToSizeResolver<TParent>;
}

export interface UploadFileAggregatorSumToWidthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorSumToHeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorSumToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileAggregatorAvgTypeResolver<TParent = any> {
  width?: UploadFileAggregatorAvgToWidthResolver<TParent>;
  height?: UploadFileAggregatorAvgToHeightResolver<TParent>;
  size?: UploadFileAggregatorAvgToSizeResolver<TParent>;
}

export interface UploadFileAggregatorAvgToWidthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorAvgToHeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorAvgToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileAggregatorMinTypeResolver<TParent = any> {
  width?: UploadFileAggregatorMinToWidthResolver<TParent>;
  height?: UploadFileAggregatorMinToHeightResolver<TParent>;
  size?: UploadFileAggregatorMinToSizeResolver<TParent>;
}

export interface UploadFileAggregatorMinToWidthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorMinToHeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorMinToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileAggregatorMaxTypeResolver<TParent = any> {
  width?: UploadFileAggregatorMaxToWidthResolver<TParent>;
  height?: UploadFileAggregatorMaxToHeightResolver<TParent>;
  size?: UploadFileAggregatorMaxToSizeResolver<TParent>;
}

export interface UploadFileAggregatorMaxToWidthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorMaxToHeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileAggregatorMaxToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileGroupByTypeResolver<TParent = any> {
  id?: UploadFileGroupByToIdResolver<TParent>;
  created_at?: UploadFileGroupByToCreated_atResolver<TParent>;
  updated_at?: UploadFileGroupByToUpdated_atResolver<TParent>;
  name?: UploadFileGroupByToNameResolver<TParent>;
  alternativeText?: UploadFileGroupByToAlternativeTextResolver<TParent>;
  caption?: UploadFileGroupByToCaptionResolver<TParent>;
  width?: UploadFileGroupByToWidthResolver<TParent>;
  height?: UploadFileGroupByToHeightResolver<TParent>;
  formats?: UploadFileGroupByToFormatsResolver<TParent>;
  hash?: UploadFileGroupByToHashResolver<TParent>;
  ext?: UploadFileGroupByToExtResolver<TParent>;
  mime?: UploadFileGroupByToMimeResolver<TParent>;
  size?: UploadFileGroupByToSizeResolver<TParent>;
  url?: UploadFileGroupByToUrlResolver<TParent>;
  previewUrl?: UploadFileGroupByToPreviewUrlResolver<TParent>;
  provider?: UploadFileGroupByToProviderResolver<TParent>;
  provider_metadata?: UploadFileGroupByToProvider_metadataResolver<TParent>;
}

export interface UploadFileGroupByToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToAlternativeTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToCaptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToWidthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToHeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToFormatsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToHashResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToExtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToMimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToPreviewUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileGroupByToProvider_metadataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionIdTypeResolver<TParent = any> {
  key?: UploadFileConnectionIdToKeyResolver<TParent>;
  connection?: UploadFileConnectionIdToConnectionResolver<TParent>;
}

export interface UploadFileConnectionIdToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionIdToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionCreated_atTypeResolver<TParent = any> {
  key?: UploadFileConnectionCreated_atToKeyResolver<TParent>;
  connection?: UploadFileConnectionCreated_atToConnectionResolver<TParent>;
}

export interface UploadFileConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionUpdated_atTypeResolver<TParent = any> {
  key?: UploadFileConnectionUpdated_atToKeyResolver<TParent>;
  connection?: UploadFileConnectionUpdated_atToConnectionResolver<TParent>;
}

export interface UploadFileConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionNameTypeResolver<TParent = any> {
  key?: UploadFileConnectionNameToKeyResolver<TParent>;
  connection?: UploadFileConnectionNameToConnectionResolver<TParent>;
}

export interface UploadFileConnectionNameToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionNameToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionAlternativeTextTypeResolver<TParent = any> {
  key?: UploadFileConnectionAlternativeTextToKeyResolver<TParent>;
  connection?: UploadFileConnectionAlternativeTextToConnectionResolver<TParent>;
}

export interface UploadFileConnectionAlternativeTextToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionAlternativeTextToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionCaptionTypeResolver<TParent = any> {
  key?: UploadFileConnectionCaptionToKeyResolver<TParent>;
  connection?: UploadFileConnectionCaptionToConnectionResolver<TParent>;
}

export interface UploadFileConnectionCaptionToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionCaptionToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionWidthTypeResolver<TParent = any> {
  key?: UploadFileConnectionWidthToKeyResolver<TParent>;
  connection?: UploadFileConnectionWidthToConnectionResolver<TParent>;
}

export interface UploadFileConnectionWidthToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionWidthToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionHeightTypeResolver<TParent = any> {
  key?: UploadFileConnectionHeightToKeyResolver<TParent>;
  connection?: UploadFileConnectionHeightToConnectionResolver<TParent>;
}

export interface UploadFileConnectionHeightToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionHeightToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionFormatsTypeResolver<TParent = any> {
  key?: UploadFileConnectionFormatsToKeyResolver<TParent>;
  connection?: UploadFileConnectionFormatsToConnectionResolver<TParent>;
}

export interface UploadFileConnectionFormatsToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionFormatsToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionHashTypeResolver<TParent = any> {
  key?: UploadFileConnectionHashToKeyResolver<TParent>;
  connection?: UploadFileConnectionHashToConnectionResolver<TParent>;
}

export interface UploadFileConnectionHashToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionHashToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionExtTypeResolver<TParent = any> {
  key?: UploadFileConnectionExtToKeyResolver<TParent>;
  connection?: UploadFileConnectionExtToConnectionResolver<TParent>;
}

export interface UploadFileConnectionExtToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionExtToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionMimeTypeResolver<TParent = any> {
  key?: UploadFileConnectionMimeToKeyResolver<TParent>;
  connection?: UploadFileConnectionMimeToConnectionResolver<TParent>;
}

export interface UploadFileConnectionMimeToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionMimeToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionSizeTypeResolver<TParent = any> {
  key?: UploadFileConnectionSizeToKeyResolver<TParent>;
  connection?: UploadFileConnectionSizeToConnectionResolver<TParent>;
}

export interface UploadFileConnectionSizeToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionSizeToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionUrlTypeResolver<TParent = any> {
  key?: UploadFileConnectionUrlToKeyResolver<TParent>;
  connection?: UploadFileConnectionUrlToConnectionResolver<TParent>;
}

export interface UploadFileConnectionUrlToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionUrlToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionPreviewUrlTypeResolver<TParent = any> {
  key?: UploadFileConnectionPreviewUrlToKeyResolver<TParent>;
  connection?: UploadFileConnectionPreviewUrlToConnectionResolver<TParent>;
}

export interface UploadFileConnectionPreviewUrlToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionPreviewUrlToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionProviderTypeResolver<TParent = any> {
  key?: UploadFileConnectionProviderToKeyResolver<TParent>;
  connection?: UploadFileConnectionProviderToConnectionResolver<TParent>;
}

export interface UploadFileConnectionProviderToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionProviderToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUploadFileConnectionProvider_metadataTypeResolver<TParent = any> {
  key?: UploadFileConnectionProvider_metadataToKeyResolver<TParent>;
  connection?: UploadFileConnectionProvider_metadataToConnectionResolver<TParent>;
}

export interface UploadFileConnectionProvider_metadataToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UploadFileConnectionProvider_metadataToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeleteFilePayloadTypeResolver<TParent = any> {
  file?: deleteFilePayloadToFileResolver<TParent>;
}

export interface deleteFilePayloadToFileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsPermissionTypeResolver<TParent = any> {
  id?: UsersPermissionsPermissionToIdResolver<TParent>;
  type?: UsersPermissionsPermissionToTypeResolver<TParent>;
  controller?: UsersPermissionsPermissionToControllerResolver<TParent>;
  action?: UsersPermissionsPermissionToActionResolver<TParent>;
  enabled?: UsersPermissionsPermissionToEnabledResolver<TParent>;
  policy?: UsersPermissionsPermissionToPolicyResolver<TParent>;
  role?: UsersPermissionsPermissionToRoleResolver<TParent>;
}

export interface UsersPermissionsPermissionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsPermissionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsPermissionToControllerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsPermissionToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsPermissionToEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsPermissionToPolicyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsPermissionToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsRoleTypeResolver<TParent = any> {
  id?: UsersPermissionsRoleToIdResolver<TParent>;
  name?: UsersPermissionsRoleToNameResolver<TParent>;
  description?: UsersPermissionsRoleToDescriptionResolver<TParent>;
  type?: UsersPermissionsRoleToTypeResolver<TParent>;
  permissions?: UsersPermissionsRoleToPermissionsResolver<TParent>;
  users?: UsersPermissionsRoleToUsersResolver<TParent>;
}

export interface UsersPermissionsRoleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleToPermissionsArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface UsersPermissionsRoleToPermissionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UsersPermissionsRoleToPermissionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleToUsersArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface UsersPermissionsRoleToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UsersPermissionsRoleToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsRoleConnectionTypeResolver<TParent = any> {
  values?: UsersPermissionsRoleConnectionToValuesResolver<TParent>;
  groupBy?: UsersPermissionsRoleConnectionToGroupByResolver<TParent>;
  aggregate?: UsersPermissionsRoleConnectionToAggregateResolver<TParent>;
}

export interface UsersPermissionsRoleConnectionToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleConnectionToGroupByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleConnectionToAggregateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsRoleAggregatorTypeResolver<TParent = any> {
  count?: UsersPermissionsRoleAggregatorToCountResolver<TParent>;
  totalCount?: UsersPermissionsRoleAggregatorToTotalCountResolver<TParent>;
}

export interface UsersPermissionsRoleAggregatorToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleAggregatorToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsRoleGroupByTypeResolver<TParent = any> {
  id?: UsersPermissionsRoleGroupByToIdResolver<TParent>;
  name?: UsersPermissionsRoleGroupByToNameResolver<TParent>;
  description?: UsersPermissionsRoleGroupByToDescriptionResolver<TParent>;
  type?: UsersPermissionsRoleGroupByToTypeResolver<TParent>;
}

export interface UsersPermissionsRoleGroupByToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleGroupByToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleGroupByToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleGroupByToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsRoleConnectionIdTypeResolver<TParent = any> {
  key?: UsersPermissionsRoleConnectionIdToKeyResolver<TParent>;
  connection?: UsersPermissionsRoleConnectionIdToConnectionResolver<TParent>;
}

export interface UsersPermissionsRoleConnectionIdToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleConnectionIdToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsRoleConnectionNameTypeResolver<TParent = any> {
  key?: UsersPermissionsRoleConnectionNameToKeyResolver<TParent>;
  connection?: UsersPermissionsRoleConnectionNameToConnectionResolver<TParent>;
}

export interface UsersPermissionsRoleConnectionNameToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleConnectionNameToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsRoleConnectionDescriptionTypeResolver<TParent = any> {
  key?: UsersPermissionsRoleConnectionDescriptionToKeyResolver<TParent>;
  connection?: UsersPermissionsRoleConnectionDescriptionToConnectionResolver<TParent>;
}

export interface UsersPermissionsRoleConnectionDescriptionToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleConnectionDescriptionToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsRoleConnectionTypeTypeResolver<TParent = any> {
  key?: UsersPermissionsRoleConnectionTypeToKeyResolver<TParent>;
  connection?: UsersPermissionsRoleConnectionTypeToConnectionResolver<TParent>;
}

export interface UsersPermissionsRoleConnectionTypeToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsRoleConnectionTypeToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLcreateRolePayloadTypeResolver<TParent = any> {
  role?: createRolePayloadToRoleResolver<TParent>;
}

export interface createRolePayloadToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLupdateRolePayloadTypeResolver<TParent = any> {
  role?: updateRolePayloadToRoleResolver<TParent>;
}

export interface updateRolePayloadToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeleteRolePayloadTypeResolver<TParent = any> {
  role?: deleteRolePayloadToRoleResolver<TParent>;
}

export interface deleteRolePayloadToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserTypeResolver<TParent = any> {
  id?: UsersPermissionsUserToIdResolver<TParent>;
  created_at?: UsersPermissionsUserToCreated_atResolver<TParent>;
  updated_at?: UsersPermissionsUserToUpdated_atResolver<TParent>;
  username?: UsersPermissionsUserToUsernameResolver<TParent>;
  email?: UsersPermissionsUserToEmailResolver<TParent>;
  provider?: UsersPermissionsUserToProviderResolver<TParent>;
  confirmed?: UsersPermissionsUserToConfirmedResolver<TParent>;
  blocked?: UsersPermissionsUserToBlockedResolver<TParent>;
  role?: UsersPermissionsUserToRoleResolver<TParent>;
  avatar?: UsersPermissionsUserToAvatarResolver<TParent>;
  recipes?: UsersPermissionsUserToRecipesResolver<TParent>;
}

export interface UsersPermissionsUserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserToProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserToConfirmedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserToBlockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserToRecipesArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface UsersPermissionsUserToRecipesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UsersPermissionsUserToRecipesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserConnectionTypeResolver<TParent = any> {
  values?: UsersPermissionsUserConnectionToValuesResolver<TParent>;
  groupBy?: UsersPermissionsUserConnectionToGroupByResolver<TParent>;
  aggregate?: UsersPermissionsUserConnectionToAggregateResolver<TParent>;
}

export interface UsersPermissionsUserConnectionToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserConnectionToGroupByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserConnectionToAggregateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserAggregatorTypeResolver<TParent = any> {
  count?: UsersPermissionsUserAggregatorToCountResolver<TParent>;
  totalCount?: UsersPermissionsUserAggregatorToTotalCountResolver<TParent>;
}

export interface UsersPermissionsUserAggregatorToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserAggregatorToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserGroupByTypeResolver<TParent = any> {
  id?: UsersPermissionsUserGroupByToIdResolver<TParent>;
  created_at?: UsersPermissionsUserGroupByToCreated_atResolver<TParent>;
  updated_at?: UsersPermissionsUserGroupByToUpdated_atResolver<TParent>;
  username?: UsersPermissionsUserGroupByToUsernameResolver<TParent>;
  email?: UsersPermissionsUserGroupByToEmailResolver<TParent>;
  provider?: UsersPermissionsUserGroupByToProviderResolver<TParent>;
  confirmed?: UsersPermissionsUserGroupByToConfirmedResolver<TParent>;
  blocked?: UsersPermissionsUserGroupByToBlockedResolver<TParent>;
  role?: UsersPermissionsUserGroupByToRoleResolver<TParent>;
  avatar?: UsersPermissionsUserGroupByToAvatarResolver<TParent>;
}

export interface UsersPermissionsUserGroupByToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserGroupByToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserGroupByToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserGroupByToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserGroupByToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserGroupByToProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserGroupByToConfirmedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserGroupByToBlockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserGroupByToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserGroupByToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserConnectionIdTypeResolver<TParent = any> {
  key?: UsersPermissionsUserConnectionIdToKeyResolver<TParent>;
  connection?: UsersPermissionsUserConnectionIdToConnectionResolver<TParent>;
}

export interface UsersPermissionsUserConnectionIdToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserConnectionIdToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserConnectionCreated_atTypeResolver<TParent = any> {
  key?: UsersPermissionsUserConnectionCreated_atToKeyResolver<TParent>;
  connection?: UsersPermissionsUserConnectionCreated_atToConnectionResolver<TParent>;
}

export interface UsersPermissionsUserConnectionCreated_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserConnectionCreated_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserConnectionUpdated_atTypeResolver<TParent = any> {
  key?: UsersPermissionsUserConnectionUpdated_atToKeyResolver<TParent>;
  connection?: UsersPermissionsUserConnectionUpdated_atToConnectionResolver<TParent>;
}

export interface UsersPermissionsUserConnectionUpdated_atToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserConnectionUpdated_atToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserConnectionUsernameTypeResolver<TParent = any> {
  key?: UsersPermissionsUserConnectionUsernameToKeyResolver<TParent>;
  connection?: UsersPermissionsUserConnectionUsernameToConnectionResolver<TParent>;
}

export interface UsersPermissionsUserConnectionUsernameToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserConnectionUsernameToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserConnectionEmailTypeResolver<TParent = any> {
  key?: UsersPermissionsUserConnectionEmailToKeyResolver<TParent>;
  connection?: UsersPermissionsUserConnectionEmailToConnectionResolver<TParent>;
}

export interface UsersPermissionsUserConnectionEmailToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserConnectionEmailToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserConnectionProviderTypeResolver<TParent = any> {
  key?: UsersPermissionsUserConnectionProviderToKeyResolver<TParent>;
  connection?: UsersPermissionsUserConnectionProviderToConnectionResolver<TParent>;
}

export interface UsersPermissionsUserConnectionProviderToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserConnectionProviderToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserConnectionConfirmedTypeResolver<TParent = any> {
  key?: UsersPermissionsUserConnectionConfirmedToKeyResolver<TParent>;
  connection?: UsersPermissionsUserConnectionConfirmedToConnectionResolver<TParent>;
}

export interface UsersPermissionsUserConnectionConfirmedToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserConnectionConfirmedToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserConnectionBlockedTypeResolver<TParent = any> {
  key?: UsersPermissionsUserConnectionBlockedToKeyResolver<TParent>;
  connection?: UsersPermissionsUserConnectionBlockedToConnectionResolver<TParent>;
}

export interface UsersPermissionsUserConnectionBlockedToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserConnectionBlockedToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserConnectionRoleTypeResolver<TParent = any> {
  key?: UsersPermissionsUserConnectionRoleToKeyResolver<TParent>;
  connection?: UsersPermissionsUserConnectionRoleToConnectionResolver<TParent>;
}

export interface UsersPermissionsUserConnectionRoleToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserConnectionRoleToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUsersPermissionsUserConnectionAvatarTypeResolver<TParent = any> {
  key?: UsersPermissionsUserConnectionAvatarToKeyResolver<TParent>;
  connection?: UsersPermissionsUserConnectionAvatarToConnectionResolver<TParent>;
}

export interface UsersPermissionsUserConnectionAvatarToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UsersPermissionsUserConnectionAvatarToConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLcreateUserPayloadTypeResolver<TParent = any> {
  user?: createUserPayloadToUserResolver<TParent>;
}

export interface createUserPayloadToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLupdateUserPayloadTypeResolver<TParent = any> {
  user?: updateUserPayloadToUserResolver<TParent>;
}

export interface updateUserPayloadToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeleteUserPayloadTypeResolver<TParent = any> {
  user?: deleteUserPayloadToUserResolver<TParent>;
}

export interface deleteUserPayloadToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLComponentRecipesIngredientsTypeResolver<TParent = any> {
  id?: ComponentRecipesIngredientsToIdResolver<TParent>;
  title?: ComponentRecipesIngredientsToTitleResolver<TParent>;
  amount?: ComponentRecipesIngredientsToAmountResolver<TParent>;
}

export interface ComponentRecipesIngredientsToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentRecipesIngredientsToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComponentRecipesIngredientsToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMorphTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'UsersPermissionsMe' | 'UsersPermissionsMeRole' | 'UsersPermissionsLoginPayload' | 'UserPermissionsPasswordPayload' | 'Recipe' | 'RecipeConnection' | 'RecipeAggregator' | 'RecipeAggregatorSum' | 'RecipeAggregatorAvg' | 'RecipeAggregatorMin' | 'RecipeAggregatorMax' | 'RecipeGroupBy' | 'RecipeConnectionId' | 'RecipeConnectionCreated_at' | 'RecipeConnectionUpdated_at' | 'RecipeConnectionTitle' | 'RecipeConnectionSlug' | 'RecipeConnectionImage' | 'RecipeConnectionNotes' | 'RecipeConnectionTime' | 'RecipeConnectionQuantity' | 'RecipeConnectionSteps' | 'RecipeConnectionAuthor' | 'RecipeConnectionPublished_at' | 'createRecipePayload' | 'updateRecipePayload' | 'deleteRecipePayload' | 'Tags' | 'TagsConnection' | 'TagsAggregator' | 'TagsGroupBy' | 'TagsConnectionId' | 'TagsConnectionCreated_at' | 'TagsConnectionUpdated_at' | 'TagsConnectionTitle' | 'TagsConnectionSlug' | 'createTagPayload' | 'updateTagPayload' | 'deleteTagPayload' | 'UsersFavoriteRecipes' | 'UsersFavoriteRecipesConnection' | 'UsersFavoriteRecipesAggregator' | 'UsersFavoriteRecipesGroupBy' | 'UsersFavoriteRecipesConnectionId' | 'UsersFavoriteRecipesConnectionCreated_at' | 'UsersFavoriteRecipesConnectionUpdated_at' | 'UsersFavoriteRecipesConnectionUser' | 'UsersFavoriteRecipesConnectionRecipe' | 'createUsersFavoriteRecipePayload' | 'updateUsersFavoriteRecipePayload' | 'deleteUsersFavoriteRecipePayload' | 'UsersViewedRecipes' | 'UsersViewedRecipesConnection' | 'UsersViewedRecipesAggregator' | 'UsersViewedRecipesGroupBy' | 'UsersViewedRecipesConnectionId' | 'UsersViewedRecipesConnectionCreated_at' | 'UsersViewedRecipesConnectionUpdated_at' | 'UsersViewedRecipesConnectionUser' | 'UsersViewedRecipesConnectionRecipe' | 'createUsersViewedRecipePayload' | 'updateUsersViewedRecipePayload' | 'deleteUsersViewedRecipePayload' | 'UploadFile' | 'UploadFileConnection' | 'UploadFileAggregator' | 'UploadFileAggregatorSum' | 'UploadFileAggregatorAvg' | 'UploadFileAggregatorMin' | 'UploadFileAggregatorMax' | 'UploadFileGroupBy' | 'UploadFileConnectionId' | 'UploadFileConnectionCreated_at' | 'UploadFileConnectionUpdated_at' | 'UploadFileConnectionName' | 'UploadFileConnectionAlternativeText' | 'UploadFileConnectionCaption' | 'UploadFileConnectionWidth' | 'UploadFileConnectionHeight' | 'UploadFileConnectionFormats' | 'UploadFileConnectionHash' | 'UploadFileConnectionExt' | 'UploadFileConnectionMime' | 'UploadFileConnectionSize' | 'UploadFileConnectionUrl' | 'UploadFileConnectionPreviewUrl' | 'UploadFileConnectionProvider' | 'UploadFileConnectionProvider_metadata' | 'deleteFilePayload' | 'UsersPermissionsPermission' | 'UsersPermissionsRole' | 'UsersPermissionsRoleConnection' | 'UsersPermissionsRoleAggregator' | 'UsersPermissionsRoleGroupBy' | 'UsersPermissionsRoleConnectionId' | 'UsersPermissionsRoleConnectionName' | 'UsersPermissionsRoleConnectionDescription' | 'UsersPermissionsRoleConnectionType' | 'createRolePayload' | 'updateRolePayload' | 'deleteRolePayload' | 'UsersPermissionsUser' | 'UsersPermissionsUserConnection' | 'UsersPermissionsUserAggregator' | 'UsersPermissionsUserGroupBy' | 'UsersPermissionsUserConnectionId' | 'UsersPermissionsUserConnectionCreated_at' | 'UsersPermissionsUserConnectionUpdated_at' | 'UsersPermissionsUserConnectionUsername' | 'UsersPermissionsUserConnectionEmail' | 'UsersPermissionsUserConnectionProvider' | 'UsersPermissionsUserConnectionConfirmed' | 'UsersPermissionsUserConnectionBlocked' | 'UsersPermissionsUserConnectionRole' | 'UsersPermissionsUserConnectionAvatar' | 'createUserPayload' | 'updateUserPayload' | 'deleteUserPayload' | 'ComponentRecipesIngredients' | Promise<'UsersPermissionsMe' | 'UsersPermissionsMeRole' | 'UsersPermissionsLoginPayload' | 'UserPermissionsPasswordPayload' | 'Recipe' | 'RecipeConnection' | 'RecipeAggregator' | 'RecipeAggregatorSum' | 'RecipeAggregatorAvg' | 'RecipeAggregatorMin' | 'RecipeAggregatorMax' | 'RecipeGroupBy' | 'RecipeConnectionId' | 'RecipeConnectionCreated_at' | 'RecipeConnectionUpdated_at' | 'RecipeConnectionTitle' | 'RecipeConnectionSlug' | 'RecipeConnectionImage' | 'RecipeConnectionNotes' | 'RecipeConnectionTime' | 'RecipeConnectionQuantity' | 'RecipeConnectionSteps' | 'RecipeConnectionAuthor' | 'RecipeConnectionPublished_at' | 'createRecipePayload' | 'updateRecipePayload' | 'deleteRecipePayload' | 'Tags' | 'TagsConnection' | 'TagsAggregator' | 'TagsGroupBy' | 'TagsConnectionId' | 'TagsConnectionCreated_at' | 'TagsConnectionUpdated_at' | 'TagsConnectionTitle' | 'TagsConnectionSlug' | 'createTagPayload' | 'updateTagPayload' | 'deleteTagPayload' | 'UsersFavoriteRecipes' | 'UsersFavoriteRecipesConnection' | 'UsersFavoriteRecipesAggregator' | 'UsersFavoriteRecipesGroupBy' | 'UsersFavoriteRecipesConnectionId' | 'UsersFavoriteRecipesConnectionCreated_at' | 'UsersFavoriteRecipesConnectionUpdated_at' | 'UsersFavoriteRecipesConnectionUser' | 'UsersFavoriteRecipesConnectionRecipe' | 'createUsersFavoriteRecipePayload' | 'updateUsersFavoriteRecipePayload' | 'deleteUsersFavoriteRecipePayload' | 'UsersViewedRecipes' | 'UsersViewedRecipesConnection' | 'UsersViewedRecipesAggregator' | 'UsersViewedRecipesGroupBy' | 'UsersViewedRecipesConnectionId' | 'UsersViewedRecipesConnectionCreated_at' | 'UsersViewedRecipesConnectionUpdated_at' | 'UsersViewedRecipesConnectionUser' | 'UsersViewedRecipesConnectionRecipe' | 'createUsersViewedRecipePayload' | 'updateUsersViewedRecipePayload' | 'deleteUsersViewedRecipePayload' | 'UploadFile' | 'UploadFileConnection' | 'UploadFileAggregator' | 'UploadFileAggregatorSum' | 'UploadFileAggregatorAvg' | 'UploadFileAggregatorMin' | 'UploadFileAggregatorMax' | 'UploadFileGroupBy' | 'UploadFileConnectionId' | 'UploadFileConnectionCreated_at' | 'UploadFileConnectionUpdated_at' | 'UploadFileConnectionName' | 'UploadFileConnectionAlternativeText' | 'UploadFileConnectionCaption' | 'UploadFileConnectionWidth' | 'UploadFileConnectionHeight' | 'UploadFileConnectionFormats' | 'UploadFileConnectionHash' | 'UploadFileConnectionExt' | 'UploadFileConnectionMime' | 'UploadFileConnectionSize' | 'UploadFileConnectionUrl' | 'UploadFileConnectionPreviewUrl' | 'UploadFileConnectionProvider' | 'UploadFileConnectionProvider_metadata' | 'deleteFilePayload' | 'UsersPermissionsPermission' | 'UsersPermissionsRole' | 'UsersPermissionsRoleConnection' | 'UsersPermissionsRoleAggregator' | 'UsersPermissionsRoleGroupBy' | 'UsersPermissionsRoleConnectionId' | 'UsersPermissionsRoleConnectionName' | 'UsersPermissionsRoleConnectionDescription' | 'UsersPermissionsRoleConnectionType' | 'createRolePayload' | 'updateRolePayload' | 'deleteRolePayload' | 'UsersPermissionsUser' | 'UsersPermissionsUserConnection' | 'UsersPermissionsUserAggregator' | 'UsersPermissionsUserGroupBy' | 'UsersPermissionsUserConnectionId' | 'UsersPermissionsUserConnectionCreated_at' | 'UsersPermissionsUserConnectionUpdated_at' | 'UsersPermissionsUserConnectionUsername' | 'UsersPermissionsUserConnectionEmail' | 'UsersPermissionsUserConnectionProvider' | 'UsersPermissionsUserConnectionConfirmed' | 'UsersPermissionsUserConnectionBlocked' | 'UsersPermissionsUserConnectionRole' | 'UsersPermissionsUserConnectionAvatar' | 'createUserPayload' | 'updateUserPayload' | 'deleteUserPayload' | 'ComponentRecipesIngredients'>;
}
export interface GQLAdminUserTypeResolver<TParent = any> {
  id?: AdminUserToIdResolver<TParent>;
  username?: AdminUserToUsernameResolver<TParent>;
  firstname?: AdminUserToFirstnameResolver<TParent>;
  lastname?: AdminUserToLastnameResolver<TParent>;
}

export interface AdminUserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdminUserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdminUserToFirstnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdminUserToLastnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLQueryTypeResolver<TParent = any> {
  recipe?: QueryToRecipeResolver<TParent>;
  recipes?: QueryToRecipesResolver<TParent>;
  recipesConnection?: QueryToRecipesConnectionResolver<TParent>;
  tag?: QueryToTagResolver<TParent>;
  tags?: QueryToTagsResolver<TParent>;
  tagsConnection?: QueryToTagsConnectionResolver<TParent>;
  usersFavoriteRecipe?: QueryToUsersFavoriteRecipeResolver<TParent>;
  usersFavoriteRecipes?: QueryToUsersFavoriteRecipesResolver<TParent>;
  usersFavoriteRecipesConnection?: QueryToUsersFavoriteRecipesConnectionResolver<TParent>;
  usersViewedRecipe?: QueryToUsersViewedRecipeResolver<TParent>;
  usersViewedRecipes?: QueryToUsersViewedRecipesResolver<TParent>;
  usersViewedRecipesConnection?: QueryToUsersViewedRecipesConnectionResolver<TParent>;
  files?: QueryToFilesResolver<TParent>;
  filesConnection?: QueryToFilesConnectionResolver<TParent>;
  role?: QueryToRoleResolver<TParent>;
  roles?: QueryToRolesResolver<TParent>;
  rolesConnection?: QueryToRolesConnectionResolver<TParent>;
  user?: QueryToUserResolver<TParent>;
  users?: QueryToUsersResolver<TParent>;
  usersConnection?: QueryToUsersConnectionResolver<TParent>;
  me?: QueryToMeResolver<TParent>;
}

export interface QueryToRecipeArgs {
  id: string;
  publicationState?: GQLPublicationState;
}
export interface QueryToRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRecipesArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
  publicationState?: GQLPublicationState;
}
export interface QueryToRecipesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRecipesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRecipesConnectionArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface QueryToRecipesConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRecipesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTagArgs {
  id: string;
  publicationState?: GQLPublicationState;
}
export interface QueryToTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTagsArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
  publicationState?: GQLPublicationState;
}
export interface QueryToTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTagsConnectionArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface QueryToTagsConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTagsConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersFavoriteRecipeArgs {
  id: string;
  publicationState?: GQLPublicationState;
}
export interface QueryToUsersFavoriteRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUsersFavoriteRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersFavoriteRecipesArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
  publicationState?: GQLPublicationState;
}
export interface QueryToUsersFavoriteRecipesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUsersFavoriteRecipesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersFavoriteRecipesConnectionArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface QueryToUsersFavoriteRecipesConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUsersFavoriteRecipesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersViewedRecipeArgs {
  id: string;
  publicationState?: GQLPublicationState;
}
export interface QueryToUsersViewedRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUsersViewedRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersViewedRecipesArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
  publicationState?: GQLPublicationState;
}
export interface QueryToUsersViewedRecipesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUsersViewedRecipesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersViewedRecipesConnectionArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface QueryToUsersViewedRecipesConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUsersViewedRecipesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToFilesArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
  publicationState?: GQLPublicationState;
}
export interface QueryToFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToFilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToFilesConnectionArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface QueryToFilesConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToFilesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRoleArgs {
  id: string;
  publicationState?: GQLPublicationState;
}
export interface QueryToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRolesArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
  publicationState?: GQLPublicationState;
}
export interface QueryToRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRolesConnectionArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface QueryToRolesConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRolesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserArgs {
  id: string;
  publicationState?: GQLPublicationState;
}
export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
  publicationState?: GQLPublicationState;
}
export interface QueryToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersConnectionArgs {
  sort?: string;
  limit?: number;
  start?: number;
  where?: GQLJSON;
}
export interface QueryToUsersConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUsersConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  createRecipe?: MutationToCreateRecipeResolver<TParent>;
  updateRecipe?: MutationToUpdateRecipeResolver<TParent>;
  deleteRecipe?: MutationToDeleteRecipeResolver<TParent>;
  createTag?: MutationToCreateTagResolver<TParent>;
  updateTag?: MutationToUpdateTagResolver<TParent>;
  deleteTag?: MutationToDeleteTagResolver<TParent>;
  createUsersFavoriteRecipe?: MutationToCreateUsersFavoriteRecipeResolver<TParent>;
  updateUsersFavoriteRecipe?: MutationToUpdateUsersFavoriteRecipeResolver<TParent>;
  deleteUsersFavoriteRecipe?: MutationToDeleteUsersFavoriteRecipeResolver<TParent>;
  createUsersViewedRecipe?: MutationToCreateUsersViewedRecipeResolver<TParent>;
  updateUsersViewedRecipe?: MutationToUpdateUsersViewedRecipeResolver<TParent>;
  deleteUsersViewedRecipe?: MutationToDeleteUsersViewedRecipeResolver<TParent>;
  deleteFile?: MutationToDeleteFileResolver<TParent>;
  createRole?: MutationToCreateRoleResolver<TParent>;
  updateRole?: MutationToUpdateRoleResolver<TParent>;
  deleteRole?: MutationToDeleteRoleResolver<TParent>;
  createUser?: MutationToCreateUserResolver<TParent>;
  updateUser?: MutationToUpdateUserResolver<TParent>;
  deleteUser?: MutationToDeleteUserResolver<TParent>;
  upload?: MutationToUploadResolver<TParent>;
  multipleUpload?: MutationToMultipleUploadResolver<TParent>;
  updateFileInfo?: MutationToUpdateFileInfoResolver<TParent>;
  login?: MutationToLoginResolver<TParent>;
  register?: MutationToRegisterResolver<TParent>;
  forgotPassword?: MutationToForgotPasswordResolver<TParent>;
  resetPassword?: MutationToResetPasswordResolver<TParent>;
  emailConfirmation?: MutationToEmailConfirmationResolver<TParent>;
}

export interface MutationToCreateRecipeArgs {
  input?: GQLcreateRecipeInput;
}
export interface MutationToCreateRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateRecipeArgs {
  input?: GQLupdateRecipeInput;
}
export interface MutationToUpdateRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteRecipeArgs {
  input?: GQLdeleteRecipeInput;
}
export interface MutationToDeleteRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateTagArgs {
  input?: GQLcreateTagInput;
}
export interface MutationToCreateTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTagArgs {
  input?: GQLupdateTagInput;
}
export interface MutationToUpdateTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteTagArgs {
  input?: GQLdeleteTagInput;
}
export interface MutationToDeleteTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateUsersFavoriteRecipeArgs {
  input?: GQLcreateUsersFavoriteRecipeInput;
}
export interface MutationToCreateUsersFavoriteRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateUsersFavoriteRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateUsersFavoriteRecipeArgs {
  input?: GQLupdateUsersFavoriteRecipeInput;
}
export interface MutationToUpdateUsersFavoriteRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateUsersFavoriteRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteUsersFavoriteRecipeArgs {
  input?: GQLdeleteUsersFavoriteRecipeInput;
}
export interface MutationToDeleteUsersFavoriteRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteUsersFavoriteRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateUsersViewedRecipeArgs {
  input?: GQLcreateUsersViewedRecipeInput;
}
export interface MutationToCreateUsersViewedRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateUsersViewedRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateUsersViewedRecipeArgs {
  input?: GQLupdateUsersViewedRecipeInput;
}
export interface MutationToUpdateUsersViewedRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateUsersViewedRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteUsersViewedRecipeArgs {
  input?: GQLdeleteUsersViewedRecipeInput;
}
export interface MutationToDeleteUsersViewedRecipeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteUsersViewedRecipeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteFileArgs {
  input?: GQLdeleteFileInput;
}
export interface MutationToDeleteFileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateRoleArgs {
  input?: GQLcreateRoleInput;
}
export interface MutationToCreateRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateRoleArgs {
  input?: GQLupdateRoleInput;
}
export interface MutationToUpdateRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteRoleArgs {
  input?: GQLdeleteRoleInput;
}
export interface MutationToDeleteRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateUserArgs {
  input?: GQLcreateUserInput;
}
export interface MutationToCreateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateUserArgs {
  input?: GQLupdateUserInput;
}
export interface MutationToUpdateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteUserArgs {
  input?: GQLdeleteUserInput;
}
export interface MutationToDeleteUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUploadArgs {
  refId?: string;
  ref?: string;
  field?: string;
  source?: string;
  info?: GQLFileInfoInput;
  file: GQLUpload;
}
export interface MutationToUploadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUploadArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMultipleUploadArgs {
  refId?: string;
  ref?: string;
  field?: string;
  source?: string;
  files: Array<GQLUpload | null>;
}
export interface MutationToMultipleUploadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMultipleUploadArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateFileInfoArgs {
  id: string;
  info: GQLFileInfoInput;
}
export interface MutationToUpdateFileInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateFileInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToLoginArgs {
  input: GQLUsersPermissionsLoginInput;
}
export interface MutationToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRegisterArgs {
  input: GQLUsersPermissionsRegisterInput;
}
export interface MutationToRegisterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRegisterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToForgotPasswordArgs {
  email: string;
}
export interface MutationToForgotPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToForgotPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToResetPasswordArgs {
  password: string;
  passwordConfirmation: string;
  code: string;
}
export interface MutationToResetPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToResetPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEmailConfirmationArgs {
  confirmation: string;
}
export interface MutationToEmailConfirmationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEmailConfirmationArgs, context: any, info: GraphQLResolveInfo): TResult;
}
